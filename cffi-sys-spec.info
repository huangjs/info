This is cffi-sys-spec.info, produced by makeinfo version 4.12 from
/Users/hjs/.sbcl/site/cffi/doc/cffi-sys-spec.texinfo.

Copyright (C) 2005-2006, James Bielman  <jamesjb at jamesjb.com>

     Permission is hereby granted, free of charge, to any person
     obtaining a copy of this software and associated documentation
     files (the "Software"), to deal in the Software without
     restriction, including without limitation the rights to use, copy,
     modify, merge, publish, distribute, sublicense, and/or sell copies
     of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be
     included in all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     DEALINGS IN THE SOFTWARE.


File: cffi-sys-spec.info,  Node: Top,  Next: Introduction,  Up: (dir)

cffi-sys
********

Copyright (C) 2005-2006, James Bielman  <jamesjb at jamesjb.com>

     Permission is hereby granted, free of charge, to any person
     obtaining a copy of this software and associated documentation
     files (the "Software"), to deal in the Software without
     restriction, including without limitation the rights to use, copy,
     modify, merge, publish, distribute, sublicense, and/or sell copies
     of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be
     included in all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     DEALINGS IN THE SOFTWARE.

* Menu:

* Introduction::
* Built-In Foreign Types::
* Operations on Foreign Types::
* Basic Pointer Operations::
* Foreign Memory Allocation::
* Memory Access::
* Foreign Function Calling::
* Loading Foreign Libraries::
* Foreign Globals::
* Symbol Index::


File: cffi-sys-spec.info,  Node: Introduction,  Next: Built-In Foreign Types,  Prev: Top,  Up: Top

1 Introduction
**************

CFFI, the Common Foreign Function Interface, purports to be a portable
foreign function interface for Common Lisp.

   This specification defines a set of low-level primitives that must be
defined for each Lisp implementation supported by CFFI.  These
operators are defined in the `CFFI-SYS' package.

   The `CFFI' package uses the `CFFI-SYS' interface to implement an
extensible foreign type system with support for typedefs, structures,
and unions, a declarative interface for defining foreign function
calls, and automatic conversion of foreign function arguments to/from
Lisp types.

   Please note the following conventions that apply to everything in
`CFFI-SYS':

   * Functions in `CFFI-SYS' that are low-level versions of functions
     exported from the `CFFI' package begin with a leading percent-sign
     (eg. `%mem-ref').

   * Where "foreign type" is mentioned as the kind of an argument, the
     meaning is restricted to that subset of all foreign types defined
     in *note Built-In Foreign Types::.  Support for higher-level types
     is always defined in terms of those lower-level types in `CFFI'
     proper.


File: cffi-sys-spec.info,  Node: Built-In Foreign Types,  Next: Operations on Foreign Types,  Prev: Introduction,  Up: Top

2 Built-In Foreign Types
************************

 -- Foreign Type: :char
 -- Foreign Type: :unsigned-char
 -- Foreign Type: :short
 -- Foreign Type: :unsigned-short
 -- Foreign Type: :int
 -- Foreign Type: :unsigned-int
 -- Foreign Type: :long
 -- Foreign Type: :unsigned-long
 -- Foreign Type: :long-long
 -- Foreign Type: :unsigned-long-long
     These types correspond to the native C integer types according to
     the ABI of the system the Lisp implementation is compiled against.

 -- Foreign Type: :int8
 -- Foreign Type: :uint8
 -- Foreign Type: :int16
 -- Foreign Type: :uint16
 -- Foreign Type: :int32
 -- Foreign Type: :uint32
 -- Foreign Type: :int64
 -- Foreign Type: :uint64
     Foreign integer types of specific sizes, corresponding to the C
     types defined in `stdint.h'.

 -- Foreign Type: :size
 -- Foreign Type: :ssize
 -- Foreign Type: :ptrdiff
 -- Foreign Type: :time
     Foreign integer types corresponding to the standard C types
     (without the `_t' suffix).

   _Implementor's note: I'm sure there are more of these that could be
useful, let's add any types that can't be defined portably to this list
as necessary._

 -- Foreign Type: :float
 -- Foreign Type: :double
     The `:float' type represents a C `float' and a Lisp
     `single-float'. `:double' represents a C `double' and a Lisp
     `double-float'.

 -- Foreign Type: :pointer
     A foreign pointer to an object of any type, corresponding to `void
     *'.

 -- Foreign Type: :void
     No type at all. Only valid as the return type of a function.


File: cffi-sys-spec.info,  Node: Operations on Foreign Types,  Next: Basic Pointer Operations,  Prev: Built-In Foreign Types,  Up: Top

3 Operations on Built-in Foreign Types
**************************************

 -- Function: %foreign-type-size type => size
     Return the SIZE, in bytes, of objects having foreign type TYPE. An
     error is signalled if TYPE is not a known built-in foreign type.

 -- Function: %foreign-type-alignment type => alignment
     Return the default alignment in bytes for structure members of
     foreign type TYPE. An error is signalled if TYPE is not a known
     built-in foreign type.

     _Implementor's note: Maybe this should take an optional keyword
     argument specifying an alternate alignment system, eg. :mac68k for
     68000-compatible alignment on Darwin._


File: cffi-sys-spec.info,  Node: Basic Pointer Operations,  Next: Foreign Memory Allocation,  Prev: Operations on Foreign Types,  Up: Top

4 Basic Pointer Operations
**************************

 -- Function: pointerp ptr => boolean
     Return true if PTR is a foreign pointer.

 -- Function: null-pointer => pointer
     Return a null foreign pointer.

 -- Function: null-pointer-p ptr => boolean
     Return true if PTR is a null foreign pointer.

 -- Function: make-pointer address => pointer
     Return a pointer corresponding to the numeric integer ADDRESS.

 -- Function: inc-pointer ptr offset => pointer
     Return the result of numerically incrementing PTR by OFFSET.


File: cffi-sys-spec.info,  Node: Foreign Memory Allocation,  Next: Memory Access,  Prev: Basic Pointer Operations,  Up: Top

5 Foreign Memory Allocation
***************************

 -- Function: foreign-alloc size => pointer
     Allocate SIZE bytes of foreign-addressable memory and return a
     POINTER to the allocated block. An implementation-specific error
     is signalled if the memory cannot be allocated.

 -- Function: foreign-free ptr => unspecified
     Free a pointer PTR allocated by `foreign-alloc'. The results are
     undefined if PTR is used after being freed.

 -- Macro: with-foreign-pointer (var size &optional size-var) &body body
     Bind VAR to a pointer to SIZE bytes of foreign-accessible memory
     during BODY.  Both PTR and the memory block it points to have
     dynamic extent and may be stack allocated if supported by the
     implementation. If SIZE-VAR is supplied, it will be bound to SIZE
     during BODY.


File: cffi-sys-spec.info,  Node: Memory Access,  Next: Foreign Function Calling,  Prev: Foreign Memory Allocation,  Up: Top

6 Memory Access
***************

 -- Accessor: %mem-ref ptr type &optional offset
     Dereference a pointer OFFSET bytes from PTR to an object for
     reading (or writing when used with `setf') of built-in type TYPE.

Example
=======

     ;; An impractical example, since time returns the time as well,
     ;; but it demonstrates %MEM-REF. Better (simple) examples wanted!
     (with-foreign-pointer (p (foreign-type-size :time))
       (foreign-funcall "time" :pointer p :time)
       (%mem-ref p :time))


File: cffi-sys-spec.info,  Node: Foreign Function Calling,  Next: Loading Foreign Libraries,  Prev: Memory Access,  Up: Top

7 Foreign Function Calling
**************************

 -- Macro: %foreign-funcall name {arg-type arg}* &optional result-type
          => object
 -- Macro: %foreign-funcall-pointer ptr {arg-type arg}* &optional
          result-type => object
     Invoke a foreign function called NAME in the foreign source code.

     Each ARG-TYPE is a foreign type specifier, followed by ARG, Lisp
     data to be converted to foreign data of type ARG-TYPE.
     RESULT-TYPE is the foreign type of the function's return value,
     and is assumed to be `:void' if not supplied.

     `%foreign-funcall-pointer' takes a pointer PTR to the function, as
     returned by `foreign-symbol-pointer', rather than a string NAME.

Examples
========

     ;; Calling a standard C library function:
     (%foreign-funcall "sqrtf" :float 16.0 :float) => 4.0

     ;; Dynamic allocation of a buffer and passing to a function:
     (with-foreign-ptr (buf 255 buf-size)
       (%foreign-funcall "gethostname" :pointer buf :size buf-size :int)
       ;; Convert buf to a Lisp string using MAKE-STRING and %MEM-REF or
       ;; a portable CFFI function such as CFFI:FOREIGN-STRING-TO-LISP.
       )


File: cffi-sys-spec.info,  Node: Loading Foreign Libraries,  Next: Foreign Globals,  Prev: Foreign Function Calling,  Up: Top

8 Loading Foreign Libraries
***************************

 -- Function: %load-foreign-library name => unspecified
     Load the foreign shared library NAME.

     _Implementor's note: There is a lot of behavior to decide here.
     Currently I lean toward not requiring NAME to be a full path to
     the library so we can search the system library directories (maybe
     even get LD_LIBRARY_PATH from the environment) as necessary._


File: cffi-sys-spec.info,  Node: Foreign Globals,  Next: Symbol Index,  Prev: Loading Foreign Libraries,  Up: Top

9 Foreign Globals
*****************

 -- Function: foreign-symbol-pointer name => pointer
     Return a pointer to a foreign symbol NAME.


File: cffi-sys-spec.info,  Node: Symbol Index,  Prev: Foreign Globals,  Up: Top

Symbol Index
************

 [index ]
* Menu:

* %foreign-funcall:                      Foreign Function Calling.
                                                               (line  8)
* %foreign-funcall-pointer:              Foreign Function Calling.
                                                               (line 10)
* %foreign-type-alignment:               Operations on Foreign Types.
                                                               (line 11)
* %foreign-type-size:                    Operations on Foreign Types.
                                                               (line  7)
* %load-foreign-library:                 Loading Foreign Libraries.
                                                               (line  7)
* %mem-ref:                              Memory Access.        (line  7)
* :char:                                 Built-In Foreign Types.
                                                               (line  7)
* :double:                               Built-In Foreign Types.
                                                               (line 43)
* :float:                                Built-In Foreign Types.
                                                               (line 42)
* :int:                                  Built-In Foreign Types.
                                                               (line 11)
* :int16:                                Built-In Foreign Types.
                                                               (line 22)
* :int32:                                Built-In Foreign Types.
                                                               (line 24)
* :int64:                                Built-In Foreign Types.
                                                               (line 26)
* :int8:                                 Built-In Foreign Types.
                                                               (line 20)
* :long:                                 Built-In Foreign Types.
                                                               (line 13)
* :long-long:                            Built-In Foreign Types.
                                                               (line 15)
* :pointer:                              Built-In Foreign Types.
                                                               (line 48)
* :ptrdiff:                              Built-In Foreign Types.
                                                               (line 33)
* :short:                                Built-In Foreign Types.
                                                               (line  9)
* :size:                                 Built-In Foreign Types.
                                                               (line 31)
* :ssize:                                Built-In Foreign Types.
                                                               (line 32)
* :time:                                 Built-In Foreign Types.
                                                               (line 34)
* :uint16:                               Built-In Foreign Types.
                                                               (line 23)
* :uint32:                               Built-In Foreign Types.
                                                               (line 25)
* :uint64:                               Built-In Foreign Types.
                                                               (line 27)
* :uint8:                                Built-In Foreign Types.
                                                               (line 21)
* :unsigned-char:                        Built-In Foreign Types.
                                                               (line  8)
* :unsigned-int:                         Built-In Foreign Types.
                                                               (line 12)
* :unsigned-long:                        Built-In Foreign Types.
                                                               (line 14)
* :unsigned-long-long:                   Built-In Foreign Types.
                                                               (line 16)
* :unsigned-short:                       Built-In Foreign Types.
                                                               (line 10)
* :void:                                 Built-In Foreign Types.
                                                               (line 52)
* foreign-alloc:                         Foreign Memory Allocation.
                                                               (line  7)
* foreign-free:                          Foreign Memory Allocation.
                                                               (line 12)
* foreign-symbol-pointer:                Foreign Globals.      (line  7)
* inc-pointer:                           Basic Pointer Operations.
                                                               (line 19)
* make-pointer:                          Basic Pointer Operations.
                                                               (line 16)
* null-pointer:                          Basic Pointer Operations.
                                                               (line 10)
* null-pointer-p:                        Basic Pointer Operations.
                                                               (line 13)
* pointerp:                              Basic Pointer Operations.
                                                               (line  7)
* with-foreign-pointer:                  Foreign Memory Allocation.
                                                               (line 16)



Tag Table:
Node: Top1298
Node: Introduction2825
Node: Built-In Foreign Types4092
Node: Operations on Foreign Types5767
Node: Basic Pointer Operations6581
Node: Foreign Memory Allocation7263
Node: Memory Access8216
Node: Foreign Function Calling8854
Node: Loading Foreign Libraries10152
Node: Foreign Globals10716
Node: Symbol Index10972

End Tag Table
