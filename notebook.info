This is notebook.info, produced by makeinfo version 4.2 from
notebook.texi.

START-INFO-DIR-ENTRY
* Notebook Mode: (notebook).      Use emacs as front end for other programs
END-INFO-DIR-ENTRY

   This is edition $Revision: 1.7 $ of the Notebook Mode Manual for
Notebook Mode version 2.0.

   Copyright (C)  2002 Fred Gylys-Colwell.


File: notebook.info,  Node: Top,  Next: Overview,  Prev: (dir),  Up: (dir)

Notebook Mode
*************

   This is edition 2.0 of the Notebook Mode Manual.

   Notebook mode sets up a sub process that has well defined input and
output responses.  Each notebook has a collection of cells, consisting
of a prompt, an input region and an output region.  You tell Emacs to
send a cell to the process (using `C-<RET>' or `M-<RET>') and when the
process responds, it will paste the output in to the output region.
You can then go back and edit other cells and re-enter them.  Between
the cells is regular text, which you can do with as you wish.

   This idea of a notebook with cells is popular with programs such as
Matlab, Maple or Mathematica.  I use it with matlab, and then pipe the
notebook through latex.

   The basic version, `notebook-mode', runs the shell `bash' as the
subprocess.  But there are other modes for running other programs.

* Menu:

* Overview::                    What Notebook Mode is and how it can be used.
* New::                          What's new in version 2.0.

Submodes
* Matlab Mode::                 Running Matlab in a notebook.
* Octave Mode::                 Running Octave in a notebook.
* MuPad Mode::                  Running Mupad in a notebook.
* Create Your Own::             Hack the code -- make your own mode.

Indices

* Concept Index::               Index of Notebook Mode Concepts.
* Keystroke Index::             Index of key bindings in Notebook Mode.


File: notebook.info,  Node: Overview,  Next: New,  Prev: Top,  Up: Top

Overview of Notebook Mode
*************************

   Notebook mode sets up a sub process that has well defined input and
output responses.  Each notebook has a collection of cells, consisting
of a prompt, an input region and an output region.  You tell Emacs to
send a cell to the process (using C-Enter or M-Enter) and when the
process responds, it will paste the output in to the output region.
You can then go back and edit other cells and re-enter them.  Between
the cells is regular text, which you can do with as you wish.

   This idea of a notebook with cells is popular with programs such as
Matlab, Maple or Mathematica.  I use it with matlab, and then pipe the
notebook through latex.

   In order to use it automatically for specific files, I've added the
following to my auto-mode-alist:
      ("\\.mu$" . mupad-notebook-mode)
      ("\\.matlab$" . matlab-notebook-mode)
      ("\\.M$" . matlab-notebook-mode)
      ("\\.octave$" . octave-notebook-mode)
      ("\\.shell$" . notebook-mode)

   There are several commands you can use to manipulate cells:

`C-<RET>'
     Sends the cell at (or just before) point to the sub-process.  If
     the process is not running, it is started.

`M-<TAB>'
     Move point the the beginning of the next cell's input.  If there
     is no cell after point, a new cell is created.

`M-<RET>'
     First enter the current cell, and then move to the next cell. This
     is the same as typing `C-<RET> M-<TAB>'.

`C-c C-n'
     Create a new cell at point.  If point is currently in a cell, a new
     cell is created on the next line.

`C-c C-r'
     Send all cells in the current region to the process.  If the
     process is not running, it is started first.

`C-c C-b'
     Send all cells in the buffer to the process.  If the process is
     not running, it is started first.

`C-c C-c'
     Kill the process.

`C-c C-s'
     Re-start the process.

`C-c C-f'
     Create a text file from the notebook.  Notebook mode trys to guess
     if the text file is plain text, HTML, or LaTeX.  It then generates
     a file of the appropriate type.


File: notebook.info,  Node: New,  Next: Matlab Mode,  Prev: Overview,  Up: Top

What's New
**********

   This version of notebook mode has a several internal changes.  The
most visible is that coloring is now done by font-lock mode.

   Another change is that the notebook modes now inherit from one of the
text modes: html-mode, text-mode, or latex-mode.  Notebook mode tries
to guess which type is appropriate by the file type.

   For noew files, it uses the variable `notebook-default-text-mode' to
pick a base mode.


File: notebook.info,  Node: Matlab Mode,  Next: Octave Mode,  Prev: New,  Up: Top

Running Matlab in a Notebook
****************************

   This runs `matlab' as the process instead of the `bash'.  In
addition to the commands available to a generic notebook, the following
commands might also be useful.  These are really only useful if you
want to embed output from matlab into a latex document.

`C-c C-f'
     Generate a LaTeX file with the same name as this buffer, except the
     extension is changed to `.tex'.  The input cells are embedded into
     special tex code that prints them with little formatting, and in
     the `tt' font.  If the prompt is `>>', then the cell is displayed
     verbatim, on a new line by itself.  If the prompt is `>', then the
     cell displayed within the current text.

`C-c >'
     Toggle the prompt style from  `>>' to  `>' and back again on the
     cell at point.  This is used when converting to a tex file to
     decide if the cell should be on a line by itself.


File: notebook.info,  Node: Octave Mode,  Next: MuPad Mode,  Prev: Matlab Mode,  Up: Top

Running Octave in a Notebook
****************************

   Note: this may be obsolete.  I haven't tested it recently.  It uses
the same interface as matlab-mode.


File: notebook.info,  Node: MuPad Mode,  Next: Create Your Own,  Prev: Octave Mode,  Up: Top

Running MuPad in a Notebook
***************************

   Note: this may be obsolete.  I haven't tested it recently.  It uses
the same interface as matlab-mode.


File: notebook.info,  Node: Create Your Own,  Next: Concept Index,  Prev: MuPad Mode,  Up: Top

Hack the code - make your own mode.
***********************************

   In order to create your own subprocess, there are several variables
that need to be set.  See the code for matlab-notebook-mode for an
example.

   The variable `nb-adjust-input-string' should be a function that
adjusts an input cell before it gets sent to the subprocess.  The hard
part is getting the sub process to print out a tag for the beginning
and end of a cell.  It is called with STRING, BUFFER, and NAME.  STRING
is the string which should be sent.  BUFFER is the name of the notebook
buffer. NAME is the name of the input cell.  Output from the process
will have to be recognized by NAME and BUFFER.  Some notebook modes
will have one process that is shared by several buffers.  That is why
the buffer name is also sent with the input.

   The variable `nb-adjust-output-string' should be a function that
strips of any extra stuff from the subprocess output.  It can also
adjust indentation or clean things up if it wants to.  It is called
with INPUT-START, INPUT-END  OUTPUT-START, OUTPUT-END, and CELL.  It
should edit the current buffer between START and END.  CELL is the name
of the cell.

   The variable `nb-start-process' should be a function that starts the
correct subprocess, or tries to find an existing process of the correct
type.

   The variable `nb-cell-regexp'  is the regular expression which
matches an entire cell.  The first character should be unusual, since
this is sometimes used in searches.  The first set of parenthesis
should match the prompt.  The second set should match either the cell
name, or an empty string.  The third should match the input part of the
cell.  The fourth should match the output part of the cell.

   The variable `nb-empty-cell-format' This is inserted as an initial
empty cell.  It is passed to the lisp function `format' with the cell
name as the argument.  For example, the shell notebook uses:

"\b%s>   \b  (no output yet)\b\n"

   The variable `nb-output-regexp' is a regular expression which
matches the output from the process.  The name of the buffer should
match the first set of parentheses.  The name of the cell should match
the second pair of parentheses.  The third set should match the useful
part of the output.

   The variable `nb-preprocess-output' can contain a function which is
called before output is inserted into the cell.  If this variable is
nil, no preprocessing is done.  It is called with the parameters (NAME
STRING) where NAME is the name of the cell and STRING is the output.
If it returns nil, the output is inserted as usual, otherwise the
output is ignored.  This can be used so that the process can send other
information to emacs.


File: notebook.info,  Node: Concept Index,  Next: Keystroke Index,  Prev: Create Your Own,  Up: Top

Concept Index
*************

* Menu:

* create new mode:                       Create Your Own.
* hack:                                  Create Your Own.
* matlab:                                Matlab Mode.
* matlab-mode:                           Matlab Mode.
* mupad:                                 MuPad Mode.
* mupad-mode:                            MuPad Mode.
* new in version 2.0:                    New.
* notebook-default-text-mode:            New.
* notebook-mode, overview of:            Overview.
* octave:                                Octave Mode.
* octave-mode:                           Octave Mode.
* other programs:                        Create Your Own.
* overview of notebook-mode:             Overview.
* text mode, default:                    New.


File: notebook.info,  Node: Keystroke Index,  Prev: Concept Index,  Up: Top

Keystroke Index
***************

* Menu:

* C-<RET> nb-send-input:                 Overview.
* C-c >:                                 Matlab Mode.
* C-c C-b nb-send-input-buffer:          Overview.
* C-c C-c nb-kill-process:               Overview.
* C-c C-f:                               Matlab Mode.
* C-c C-f notebook-to-????:              Overview.
* C-c C-n nb-create-cell:                Overview.
* C-c C-r nb-send-input-region:          Overview.
* C-c C-s nb-start-process:              Overview.
* M-<RET> nb-send-input-forward:         Overview.
* M-<TAB> nb-next-cell:                  Overview.



Tag Table:
Node: Top334
Node: Overview1840
Node: New4009
Node: Matlab Mode4534
Node: Octave Mode5554
Node: MuPad Mode5812
Node: Create Your Own6072
Node: Concept Index8883
Node: Keystroke Index9761

End Tag Table
