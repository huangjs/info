This is sbcl.info, produced by makeinfo version 4.11 from sbcl.texinfo.

INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* sbcl: (sbcl).           The Steel Bank Common Lisp compiler
END-INFO-DIR-ENTRY

     This manual is part of the SBCL software system. See the `README'
     file for more information.

     This manual is largely derived from the manual for the CMUCL
     system, which was produced at Carnegie Mellon University and later
     released into the public domain. This manual is in the public
     domain and is provided with absolutely no warranty. See the
     `COPYING' and `CREDITS' files for more information.


File: sbcl.info,  Node: Contributed Modules,  Next: Concept Index,  Prev: Profiling,  Up: Top

16 Contributed Modules
**********************

SBCL comes with a number of modules that are not part of the core
system.  These are loaded via `(require :MODULENAME)' (*note
Customization Hooks for Users::).  This section contains documentation
(or pointers to documentation) for some of the contributed modules.

* Menu:

* sb-aclrepl::
* sb-grovel::
* sb-posix::
* sb-md5::
* sb-queue::
* sb-rotate-byte::
* sb-cover::


File: sbcl.info,  Node: sb-aclrepl,  Next: sb-grovel,  Up: Contributed Modules

16.1 sb-aclrepl
===============

The `sb-aclrepl' module offers an Allegro CL-style Read-Eval-Print Loop
for SBCL, with integrated inspector.  Adding a debugger interface is
planned.

16.1.1 Usage
------------

To start `sb-aclrepl' as your read-eval-print loop, put the form
     (require 'sb-aclrepl)

   in your `~/.sbclrc' initialization file.

16.1.2 Example Initialization
-----------------------------

Here's a longer example of a `~/.sbclrc' file that shows off some of
the features of `sb-aclrepl':

     (ignore-errors (require 'sb-aclrepl))

     (when (find-package 'sb-aclrepl)
       (push :aclrepl cl:*features*))
     #+aclrepl
     (progn
       (setq sb-aclrepl:*max-history* 100)
       (setf (sb-aclrepl:alias "asdc")
            #'(lambda (sys) (asdf:operate 'asdf:compile-op sys)))
       (sb-aclrepl:alias "l" (sys) (asdf:operate 'asdf:load-op sys))
       (sb-aclrepl:alias "t" (sys) (asdf:operate 'asdf:test-op sys))
       ;; The 1 below means that two characaters ("up") are required
       (sb-aclrepl:alias ("up" 1 "Use package") (package) (use-package package))
       ;; The 0 below means only the first letter ("r") is required,
       ;; such as ":r base64"
       (sb-aclrepl:alias ("require" 0 "Require module") (sys) (require sys))
       (setq cl:*features* (delete :aclrepl cl:*features*)))

   Questions, comments, or bug reports should be sent to Kevin Rosenberg
(<kevin@rosenberg.net>).

16.1.3 Credits
--------------

Allegro CL is a registered trademark of Franz Inc.


File: sbcl.info,  Node: sb-grovel,  Next: sb-posix,  Prev: sb-aclrepl,  Up: Contributed Modules

16.2 sb-grovel
==============

The `sb-grovel' module helps in generation of foreign function
interfaces. It aids in extracting constants' values from the C compiler
and in generating SB-ALIEN structure and union types, *note Defining
Foreign Types::.

   The ASDF(`http://www.cliki.net/ASDF') component type
GROVEL-CONSTANTS-FILE has its PERFORM operation defined to write out a
C source file, compile it, and run it.  The output from this program is
Lisp, which is then itself compiled and loaded.

   sb-grovel is used in a few contributed modules, and it is currently
compatible only to SBCL. However, if you want to use it, here are a few
directions.

16.2.1 Using sb-grovel in your own ASDF system
----------------------------------------------

  1. Create a Lisp package for the foreign constants/functions to go
     into.

  2. Make your system depend on the 'sb-grovel system.

  3. Create a grovel-constants data file - for an example, see
     example-constants.lisp in the contrib/sb-grovel/ directory in the
     SBCL source distribution.

  4. Add it as a component in your system. e.g.

          (eval-when (:compile-toplevel :load-toplevel :execute)
            (require :sb-grovel))

          (defpackage :example-package.system
                      (:use :cl :asdf :sb-grovel :sb-alien))

          (in-package :example-package.system)

          (defsystem example-system
              :depends-on (sb-grovel)
              :components
              ((:module "sbcl"
                        :components
                        ((:file "defpackage")
                         (grovel-constants-file "example-constants"
                                                :package :example-package)))))

     Make sure to specify the package you chose in step 1

  5. Build stuff.


16.2.2 Contents of a grovel-constants-file
------------------------------------------

The grovel-constants-file, typically named `constants.lisp', comprises
lisp expressions describing the foreign things that you want to grovel
for. A `constants.lisp' file contains two sections:

   * a list of headers to include in the C program, for example:
          ("sys/types.h" "sys/socket.h" "sys/stat.h" "unistd.h" "sys/un.h"
           "netinet/in.h" "netinet/in_systm.h" "netinet/ip.h" "net/if.h"
           "netdb.h" "errno.h" "netinet/tcp.h" "fcntl.h" "signal.h" )

   * A list of sb-grovel clauses describing the things you want to
     grovel from the C compiler, for example:
          ((:integer af-local
                     #+(or sunos solaris) "AF_UNIX"
                     #-(or sunos solaris) "AF_LOCAL"
                     "Local to host (pipes and file-domain).")
           (:structure stat ("struct stat"
                             (integer dev "dev_t" "st_dev")
                             (integer atime "time_t" "st_atime")))
           (:function getpid ("getpid" int )))

   There are two types of things that sb-grovel can sensibly extract
from the C compiler: constant integers and structure layouts. It is also
possible to define foreign functions in the constants.lisp file, but
these definitions don't use any information from the C program; they
expand directly to `sb-alien:define-alien-routine' (*note The
define-alien-routine Macro::) forms.

   Here's how to use the grovel clauses:

   * `:integer' - constant expressions in C. Used in this form:
           (:integer lisp-variable-name "C expression" &optional doc export)

     `"C expression"' will be typically be the name of a constant. But
     other forms are possible.

   * `:enum'
           (:enum lisp-type-name ((lisp-enumerated-name c-enumerated-name) ...)))

     An `sb-alien:enum' type with name `lisp-type-name' will be defined.
     The symbols are the `lisp-enumerated-name's, and the values are
     grovelled from the `c-enumerated-name's.

   * `:structure' - alien structure definitions look like this:
           (:structure lisp-struct-name ("struct c_structure"
                                         (type-designator lisp-element-name
                                          "c_element_type" "c_element_name"
                                          :distrust-length nil)
                                         ; ...
                                         ))

     `type-designator' is a reference to a type whose size (and type
     constraints) will be groveled for. sb-grovel accepts a form of type
     designator that doesn't quite conform to either lisp nor sb-alien's
     type specifiers. Here's a list of type designators that sb-grovel
     currently accepts:
        * `integer' - a C integral type; sb-grovel will infer the exact
          type from size information extracted from the C program. All
          common C integer types can be grovelled for with this type
          designator, but it is not possible to grovel for bit fields
          yet.

        * `(unsigned n)' - an unsigned integer variable that is `n'
          bytes long. No size information from the C program will be
          used.

        * `(signed n)' - an signed integer variable that is `n' bytes
          long. No size information from the C program will be used.

        * `c-string' - an array of `char' in the structure. sb-grovel
          will use the array's length from the C program, unless you
          pass it the `:distrust-length' keyword argument with
          non-`nil' value (this might be required for structures such
          as solaris's `struct dirent').

        * `c-string-pointer' - a pointer to a C string, corresponding to
          the `sb-alien:c-string' type (*note Foreign Type
          Specifiers::).

        * `(array alien-type)' - An array of the previously-declared
          alien type. The array's size will be determined from the
          output of the C program and the alien type's size.

        * `(array alien-type n)' - An array of the previously-declared
          alien type. The array's size will be assumed as being `n'.

     Note that `c-string' and `c-string-pointer' do not have the same
     meaning. If you declare that an element is of type `c-string', it
     will be treated as if the string is a part of the structure,
     whereas if you declare that the element is of type
     `c-string-pointer', a _pointer to a string_ will be the structure
     member.

   * `:function' - alien function definitions are similar to
     `define-alien-routine' definitions, because they expand to such
     forms when the lisp program is loaded. *Note Foreign Function
     Calls::.

          (:function lisp-function-name ("alien_function_name" alien-return-type
                                                               (argument alien-type)
                                                               (argument2 alien-type)))

16.2.3 Programming with sb-grovel's structure types
---------------------------------------------------

Let us assume that you have a grovelled structure definition:
      (:structure mystruct ("struct my_structure"
                            (integer myint "int" "st_int")
                            (c-string mystring "char[]" "st_str")))

   What can you do with it? Here's a short interface document:

   * Creating and destroying objects:
        * Function `(allocate-mystruct)' - allocates an object of type
          `mystruct'and returns a system area pointer to it.

        * Function `(free-mystruct var)' - frees the alien object
          pointed to by VAR.

        * Macro `(with-mystruct var ((member init) [...]) &body body)' -
          allocates an object of type `mystruct' that is valid in BODY.
          If BODY terminates or control unwinds out of BODY, the object
          pointed to by VAR will be deallocated.

   * Accessing structure members:
        * `(mystruct-myint var)' and `(mystruct-mystring var)' return
          the value of the respective fields in `mystruct'.

        * `(setf (mystruct-myint var) new-val)' and `(setf
          (mystruct-mystring var) new-val)' sets the value of the
          respective structure member to the value of NEW-VAL. Notice
          that in `(setf (mystruct-mystring var) new-val)''s case,
          new-val is a lisp string.

16.2.3.1 Traps and Pitfalls
...........................

Basically, you can treat functions and data structure definitions that
sb-grovel spits out as if they were alien routines and types. This has
a few implications that might not be immediately obvious (especially if
you have programmed in a previous version of sb-grovel that didn't use
alien types):

   * You must take care of grovel-allocated structures yourself. They
     are alien types, so the garbage collector will not collect them
     when you drop the last reference.

   * If you use the `with-mystruct' macro, be sure that no references
     to the variable thus allocated leaks out. It will be deallocated
     when the block exits.


File: sbcl.info,  Node: sb-posix,  Next: sb-md5,  Prev: sb-grovel,  Up: Contributed Modules

16.3 sb-posix
=============

Sb-posix is the supported interface for calling out to the operating
system.(1)

   The scope of this interface is "operating system calls on a typical
Unixlike platform".  This is section 2 of the Unix manual, plus section
3 calls that are (a) typically found in libc, but (b) not part of the C
standard.  For example, we intend to provide support for `opendir()'
and `readdir()', but not for `printf()'.  That said, if your favourite
system call is not included yet, you are encouraged to submit a patch
to the SBCL mailing list.

   Some facilities are omitted where they offer absolutely no additional
use over some portable function, or would be actively dangerous to the
consistency of Lisp.  Not all functions are available on all platforms.

* Menu:

* Lisp names for C names::
* Types::
* Function Parameters::
* Function Return Values::
* Lisp objects and C structures::
* Functions with idiosyncratic bindings::

   ---------- Footnotes ----------

   (1) The functionality contained in the package `SB-UNIX' is for SBCL
internal use only; its contents are likely to change from version to
version.


File: sbcl.info,  Node: Lisp names for C names,  Next: Types,  Up: sb-posix

16.3.1 Lisp names for C names
-----------------------------

All symbols are in the `SB-POSIX' package.  This package contains a
Lisp function for each supported Unix system call or function, a
variable or constant for each supported Unix constant, an object type
for each supported Unix structure type, and a slot name for each
supported Unix structure member.  A symbol name is derived from the C
binding's name, by (a) uppercasing, then (b) removing leading
underscores (`#\_') then replacing remaining underscore characters with
the hyphen (`#\-'). The requirement to uppercase is so that in a
standard upcasing reader the user may write `sb-posix:creat' instead of
`sb-posix:|creat|' as would otherise be required.

   No other changes to "Lispify" symbol names are made, so `creat()'
becomes `CREAT', not `CREATE'.

   The user is encouraged not to `(USE-PACKAGE :SB-POSIX)' but instead
to use the `SB-POSIX:' prefix on all references, as some of the symbols
symbols contained in the SB-POSIX package have the same name as CL
symbols (`OPEN', `CLOSE', `SIGNAL' etc).


File: sbcl.info,  Node: Types,  Next: Function Parameters,  Prev: Lisp names for C names,  Up: sb-posix

16.3.2 Types
------------

Generally, marshalling between Lisp and C data types is done using
SBCL's FFI. *Note Foreign Function Interface::.

   Some functions accept objects such as filenames or file descriptors.
In the C binding to POSIX these are represented as strings and small
integers respectively. For the Lisp programmer's convenience we
introduce designators such that CL pathnames or open streams can be
passed to these functions.  For example, `rename' accepts both
pathnames and strings as its arguments.

* Menu:

* File-descriptors::
* Filenames::


File: sbcl.info,  Node: File-descriptors,  Next: Filenames,  Up: Types

16.3.2.1 File-descriptors
.........................

 -- Type: sb-posix:file-descriptor
     A `fixnum' designating a native file descriptor.

     `sb-sys:make-fd-stream' can be used to construct a `file-stream'
     associated with a native file descriptor.

     Note that mixing I/O operations on a `file-stream' with operations
     directly on its descriptor may produce unexpected results if the
     stream is buffered.

 -- Type: sb-posix:file-descriptor-designator
     Designator for a `file-descriptor:' either a fixnum designating
     itself, or a `file-stream' designating the underlying
     file-descriptor.

 -- Function: sb-posix:file-descriptor file-descriptor
     Converts `file-descriptor-designator' into a `file-descriptor'.


File: sbcl.info,  Node: Filenames,  Prev: File-descriptors,  Up: Types

16.3.2.2 Filenames
..................

 -- Type: sb-posix:filename
     A `string' designating a filename in native namestring syntax.

     Note that native namestring syntax is distinct from Lisp
     namestring syntax:

            (pathname "/foo*/bar")

     is a wild pathname with a pattern-matching directory component.
     `sb-ext:parse-native-namestring' may be used to construct Lisp
     pathnames that denote `posix' filenames as understood by system
     calls, and `sb-ext:native-namestring' can be used to coerce them
     into strings in the native namestring syntax.

     Note also that `posix' filename syntax does not distinguish the
     names of files from the names of directories: in order to parse
     the name of a directory in `posix' filename syntax into a pathname
     `my-defaults' for which

            (merge-pathnames (make-pathname :name "FOO" :case :common)
                              my-defaults)

     returns a pathname that denotes a file in the directory, supply a
     true `:as-directory' argument to `sb-ext:parse-native-namestring'.
     Likewise, to supply the name of a directory to a `posix' function
     in non-directory syntax, supply a true `:as-file' argument to
     `sb-ext:native-namestring'.

 -- Type: sb-posix:filename-designator
     Designator for a `filename:' a `string' designating itself, or a
     designator for a `pathname' designating the corresponding native
     namestring.

 -- Function: sb-posix:filename filename
     Converts `filename-designator' into a `filename'.


File: sbcl.info,  Node: Function Parameters,  Next: Function Return Values,  Prev: Types,  Up: sb-posix

16.3.3 Function Parameters
--------------------------

The calling convention is modelled after that of CMUCL's `UNIX'
package: in particular, it's like the C interface except that:

  a. Length arguments are omitted or optional where the sensible value
     is obvious.  For example, `read' would be defined this way:

          (read fd buffer &optional (length (length buffer))) => bytes-read

  b. Where C simulates "out" parameters using pointers (for instance, in
     `pipe()' or `socketpair()') these may be optional or omitted in
     the Lisp interface: if not provided, appropriate objects will be
     allocated and returned (using multiple return values if necessary).

  c. Some functions accept objects such as filenames or file
     descriptors.  Wherever these are specified as such in the C
     bindings, the Lisp interface accepts designators for them as
     specified in the 'Types' section above.

  d. A few functions have been included in sb-posix that do not
     correspond exactly with their C counterparts.  These are described
     in *Note Functions with idiosyncratic bindings::.



File: sbcl.info,  Node: Function Return Values,  Next: Lisp objects and C structures,  Prev: Function Parameters,  Up: sb-posix

16.3.4 Function Return Values
-----------------------------

The return value is usually the same as for the C binding, except in
error cases: where the C function is defined as returning some sentinel
value and setting `errno' on error, we instead signal an error of type
`SYSCALL-ERROR'.  The actual error value (`errno') is stored in this
condition and can be accessed with `SYSCALL-ERRNO'.

   We do not automatically translate the returned value into "Lispy"
objects - for example, `SB-POSIX:OPEN' returns a small integer, not a
stream.  Exception: boolean-returning functions (or, more commonly,
macros) do not return a C integer, but instead a Lisp boolean.


File: sbcl.info,  Node: Lisp objects and C structures,  Next: Functions with idiosyncratic bindings,  Prev: Function Return Values,  Up: sb-posix

16.3.5 Lisp objects and C structures
------------------------------------

Sb-posix provides various Lisp object types to stand in for C
structures in the POSIX library.  Lisp bindings to C functions that
accept, manipulate, or return C structures accept, manipulate, or
return instances of these Lisp types instead of instances of alien
types.

   The names of the Lisp types are chosen according to the general rules
described above.  For example Lisp objects of type `STAT' stand in for
C structures of type `struct stat'.

   Accessors are provided for each standard field in the structure.
These are named `STRUCTURE-NAME-FIELD-NAME' where the two components
are chosen according to the general name conversion rules, with the
exception that in cases where all fields in a given structure have a
common prefix, that prefix is omitted. For example, `stat.st_dev' in C
becomes `STAT-DEV' in Lisp.

   Because sb-posix might not support all semi-standard or
implementation-dependent members of all structure types on your system
(patches welcome), here is an enumeration of all supported Lisp objects
corresponding to supported POSIX structures, and the supported slots
for those structures.

   * flock

      -- Class: sb-posix:flock
          Class precedence list: `flock, standard-object, t'

          Slots:
             * `type' -- initarg: `:type'; reader:
               `sb-posix:flock-type'; writer:
               `(setf sb-posix:flock-type)'

               Type of lock; F_RDLCK, F_WRLCK, F_UNLCK.

             * `whence' -- initarg: `:whence'; reader:
               `sb-posix:flock-whence'; writer:
               `(setf sb-posix:flock-whence)'

               Flag for starting offset.

             * `start' -- initarg: `:start'; reader:
               `sb-posix:flock-start'; writer:
               `(setf sb-posix:flock-start)'

               Relative offset in bytes.

             * `len' -- initarg: `:len'; reader: `sb-posix:flock-len';
               writer: `(setf sb-posix:flock-len)'

               Size; if 0 then until `eof'.

             * `pid' -- reader: `sb-posix:flock-pid'

               Process `id' of the process holding the lock; returned
               with F_GETLK.

          Class representing locks used in fcntl(2).

   * passwd

      -- Class: sb-posix:passwd
          Class precedence list: `passwd, standard-object, t'

          Slots:
             * `name' -- initarg: `:name'; reader:
               `sb-posix:passwd-name'; writer:
               `(setf sb-posix:passwd-name)'

               User's login name.

             * `passwd' -- initarg: `:passwd'; reader:
               `sb-posix:passwd-passwd'; writer:
               `(setf sb-posix:passwd-passwd)'

               The account's encrypted password.

             * `uid' -- initarg: `:uid'; reader: `sb-posix:passwd-uid';
               writer: `(setf sb-posix:passwd-uid)'

               Numerical user `id'.

             * `gid' -- initarg: `:gid'; reader: `sb-posix:passwd-gid';
               writer: `(setf sb-posix:passwd-gid)'

               Numerical group `id'.

             * `gecos' -- initarg: `:gecos'; reader:
               `sb-posix:passwd-gecos'; writer:
               `(setf sb-posix:passwd-gecos)'

               User's name or comment field.

             * `dir' -- initarg: `:dir'; reader: `sb-posix:passwd-dir';
               writer: `(setf sb-posix:passwd-dir)'

               Initial working directory.

             * `shell' -- initarg: `:shell'; reader:
               `sb-posix:passwd-shell'; writer:
               `(setf sb-posix:passwd-shell)'

               Program to use as shell.

          Instances of this class represent entries in
           the system's user database.

   * stat

      -- Class: sb-posix:stat
          Class precedence list: `stat, standard-object, t'

          Slots:
             * `mode' -- initarg: `:mode'; reader: `sb-posix:stat-mode'

               Mode of file.

             * `ino' -- initarg: `:ino'; reader: `sb-posix:stat-ino'

               File serial number.

             * `dev' -- initarg: `:dev'; reader: `sb-posix:stat-dev'

               Device `id' of device containing file.

             * `nlink' -- initarg: `:nlink'; reader:
               `sb-posix:stat-nlink'

               Number of hard links to the file.

             * `uid' -- initarg: `:uid'; reader: `sb-posix:stat-uid'

               User `id' of file.

             * `gid' -- initarg: `:gid'; reader: `sb-posix:stat-gid'

               Group `id' of file.

             * `size' -- initarg: `:size'; reader: `sb-posix:stat-size'

               For regular files, the file size in
                  bytes.  For symbolic links, the length
                        in bytes of the filename contained in
                             the symbolic link.

             * `atime' -- initarg: `:atime'; reader:
               `sb-posix:stat-atime'

               Time of last access.

             * `mtime' -- initarg: `:mtime'; reader:
               `sb-posix:stat-mtime'

               Time of last data modification.

             * `ctime' -- initarg: `:ctime'; reader:
               `sb-posix:stat-ctime'

               Time of last status change

          Instances of this class represent Posix file
           metadata.

   * termios

      -- Class: sb-posix:termios
          Class precedence list: `termios, standard-object, t'

          Slots:
             * `iflag' -- initarg: `:iflag'; reader:
               `sb-posix:termios-iflag'; writer:
               `(setf sb-posix:termios-iflag)'

               Input modes.

             * `oflag' -- initarg: `:oflag'; reader:
               `sb-posix:termios-oflag'; writer:
               `(setf sb-posix:termios-oflag)'

               Output modes.

             * `cflag' -- initarg: `:cflag'; reader:
               `sb-posix:termios-cflag'; writer:
               `(setf sb-posix:termios-cflag)'

               Control modes.

             * `lflag' -- initarg: `:lflag'; reader:
               `sb-posix:termios-lflag'; writer:
               `(setf sb-posix:termios-lflag)'

               Local modes.

          Instances of this class represent I/O
          characteristics of the terminal.

   * timeval

      -- Class: sb-posix:timeval
          Class precedence list: `timeval, standard-object, t'

          Slots:
             * `sec' -- initarg: `:tv-sec'; reader:
               `sb-posix:timeval-sec'; writer:
               `(setf sb-posix:timeval-sec)'

               Seconds.

             * `usec' -- initarg: `:tv-usec'; reader:
               `sb-posix:timeval-usec'; writer:
               `(setf sb-posix:timeval-usec)'

               Microseconds.

          Instances of this class represent time values.


File: sbcl.info,  Node: Functions with idiosyncratic bindings,  Prev: Lisp objects and C structures,  Up: sb-posix

16.3.6 Functions with idiosyncratic bindings
--------------------------------------------

A few functions in sb-posix don't correspond directly to their C
counterparts.

   * getcwd

      -- Function: sb-posix:getcwd
          Returns the process's current working directory as a string.

   * readlink

      -- Function: sb-posix:readlink pathspec
          Returns the resolved target of a symbolic link as a string.

   * syslog

      -- Function: sb-posix:syslog priority format &rest args
          Send a message to the syslog facility, with severity level
          `priority'.  The message will be formatted as by `cl:format'
          (rather than C's printf) with format string `format' and
          arguments `args'.


File: sbcl.info,  Node: sb-md5,  Next: sb-queue,  Prev: sb-posix,  Up: Contributed Modules

16.4 sb-md5
===========

The `sb-md5' module implements the RFC1321 MD5 Message Digest
Algorithm. [FIXME cite]

 -- Function: sb-md5:md5sum-file pathname
     Calculate the MD5 message-digest of the file designated by
     pathname.

 -- Function: sb-md5:md5sum-sequence sequence &key start end
     Calculate the MD5 message-digest of data bounded by `start' and
     `end' in `sequence' , which must be a vector with element-type
     (UNSIGNED-BYTE 8).

 -- Function: sb-md5:md5sum-stream stream
     Calculate an MD5 message-digest of the contents of `stream', whose
     element-type has to be (UNSIGNED-BYTE 8).

 -- Function: sb-md5:md5sum-string string &key external-format start end
     Calculate the MD5 message-digest of the binary representation of
     `string' (as octets) in `external-format'. The boundaries `start'
     and `end' refer to character positions in the string, not to octets
     in the resulting binary representation.

16.4.1 Credits
--------------

The implementation for CMUCL was largely done by Pierre Mai, with help
from members of the `cmucl-help' mailing list.  Since CMUCL and SBCL
are similar in many respects, it was not too difficult to extend the
low-level implementation optimizations for CMUCL to SBCL.  Following
this, SBCL's compiler was extended to implement efficient compilation
of modular arithmetic (*note Modular arithmetic::), which enabled the
implementation to be expressed in portable arithmetical terms, apart
from the use of `rotate-byte' for bitwise rotation.  


File: sbcl.info,  Node: sb-queue,  Next: sb-rotate-byte,  Prev: sb-md5,  Up: Contributed Modules

16.5 sb-queue
=============

The `sb-queue' module, loadable by
     (require :sb-queue)
   provides a thread-safe lockless FIFO queues.

 -- Structure: sb-queue:queue
     Class precedence list: `queue, structure-object, t'

     Lock-free thread safe queue. `enqueue' can be used to add objects
     to the queue, and `dequeue' retrieves items from the queue in
     `fifo' order.

 -- Function: sb-queue:dequeue queue
     Retrieves the oldest value in `queue' and returns it as the
     primary value, and `t' as secondary value. If the queue is empty,
     returns `nil' as both primary and secondary value.

 -- Function: sb-queue:enqueue value queue
     Adds `value' to the end of `queue'. Returns `value'.

 -- Function: sb-queue:list-queue-contents queue
     Returns the contents of `queue' as a list without removing them
     from the `queue'. Mainly useful for manual examination of queue
     state.

 -- Function: sb-queue:make-queue &key name initial-contents
     Returns a new `queue' with `name' and contents of the
     `initial-contents' sequence enqueued.

 -- Function: sb-queue:queue-count queue
     Returns the number of objects in `queue'. Mainly useful for manual
     examination of queue state, and in `print-object' methods:
     inefficient as it walks the entire queue.

 -- Function: sb-queue:queue-empty-p queue
     Returns `t' if `queue' is empty, `nil' otherwise.

 -- Function: sb-queue:queue-name instance
     Name of a `queue'. Can be assingned to using `setf'. Queue names
     can be arbitrary printable objects, and need not be unique.

 -- Function: sb-queue:queuep object
     Returns true if argument is a `queue', `nil' otherwise.


File: sbcl.info,  Node: sb-rotate-byte,  Next: sb-cover,  Prev: sb-queue,  Up: Contributed Modules

16.6 sb-rotate-byte
===================

The `sb-rotate-byte' module offers an interface to bitwise rotation,
with an efficient implementation for operations which can be performed
directly using the platform's arithmetic routines.  It implements the
specification at `http://www.cliki.net/ROTATE-BYTE'.

   Bitwise rotation is a component of various cryptographic or hashing
algorithms: MD5, SHA-1, etc.; often these algorithms are specified on
32-bit rings.  [FIXME cite cite cite].

 -- Function: sb-rotate-byte:rotate-byte count bytespec integer
     Rotates a field of bits within `integer'; specifically, returns an
     integer that contains the bits of `integer' rotated `count' times
     leftwards within the byte specified by `bytespec', and elsewhere
     contains the bits of `integer'.


File: sbcl.info,  Node: sb-cover,  Prev: sb-rotate-byte,  Up: Contributed Modules

16.7 sb-cover
=============

The `sb-cover' module provides a code coverage tool for SBCL. The tool
has support for expression coverage, and for some branch coverage.
Coverage reports are only generated for code compiled using
`compile-file' with the value of the `sb-cover:store-coverage-data'
optimization quality set to 3.

   As of SBCL 1.0.6 `sb-cover' is still experimental, and the
interfaces documented here might change in later versions.

16.7.1 Example Usage
--------------------

     ;;; Load SB-COVER
     (require :sb-cover)

     ;;; Turn on generation of code coverage instrumentation in the compiler
     (declaim (optimize sb-cover:store-coverage-data))

     ;;; Load some code, ensuring that it's recompiled with the new optimization
     ;;; policy.
     (asdf:oos 'asdf:load-op :cl-ppcre-test :force t)

     ;;; Run the test suite.
     (cl-ppcre-test:test)

     ;;; Produce a coverage report
     (sb-cover:report "/tmp/report/")

     ;;; Turn off instrumentation
     (declaim (optimize (sb-cover:store-coverage-data 0)))

16.7.2 Functions
----------------

 -- Function: sb-cover:report directory &key form-mode external-format
     Print a code coverage report of all instrumented files into
     `directory'.  If `directory' does not exist, it will be created.
     The main report will be printed to the file cover-index.html. The
     external format of the source files can be specified with the
     `external-format' parameter.

     If the keyword argument `form-mode' has the value `:car', the
     annotations in the coverage report will be placed on the CARs of
     any cons-forms, while if it has the value `:whole' the whole form
     will be annotated (the default).  The former mode shows explicitly
     which forms were instrumented, while the latter mode is generally
     easier to read.

 -- Function: sb-cover:reset-coverage
     Reset all coverage data back to the `Not executed` state.

 -- Function: sb-cover:clear-coverage
     Clear all files from the coverage database. The files will be
     re-entered into the database when the `fasl' files (produced by
     compiling `store-coverage-data' optimization policy set to 3) are
     loaded again into the image.

 -- Function: sb-cover:save-coverage
     Returns an opaque representation of the current code coverage
     state.  The only operation that may be done on the state is
     passing it to `restore-coverage'. The representation is guaranteed
     to be readably printable.  A representation that has been printed
     and read back will work identically in `restore-coverage'.

 -- Function: sb-cover:save-coverage-in-file pathname
     Call `save-coverage' and write the results of that operation into
     the file designated by `pathname'.

 -- Function: sb-cover:restore-coverage coverage-state
     Restore the code coverage data back to an earlier state produced by
     `save-coverage'.

 -- Function: sb-cover:restore-coverage-from-file pathname
     `read' the contents of the file designated by `pathname' and pass
     the result to `restore-coverage'.


File: sbcl.info,  Node: Concept Index,  Next: Function Index,  Prev: Contributed Modules,  Up: Top

Appendix A Concept Index
************************

 [index ]
* Menu:

* Actual Source <1>:                     The Original and Actual Source.
                                                               (line  6)
* Actual Source:                         The Parts of a Compiler Diagnostic.
                                                               (line 53)
* Arithmetic, hardware <1>:              sb-rotate-byte.       (line  6)
* Arithmetic, hardware:                  Modular arithmetic.   (line  6)
* Arithmetic, modular <1>:               sb-rotate-byte.       (line  6)
* Arithmetic, modular:                   Modular arithmetic.   (line  6)
* Availability of debug variables:       Variable Value Availability.
                                                               (line  6)
* Block compilation, debugger implications: Entry Point Details.
                                                               (line  6)
* Block, basic:                          Source Location Availability.
                                                               (line  6)
* Block, start location:                 Source Location Availability.
                                                               (line  6)
* Cleanup, stack frame kind:             Entry Point Details.  (line  6)
* Code Coverage:                         sb-cover.             (line  6)
* Compatibility with other Lisps:        Getting Existing Programs to Run.
                                                               (line  6)
* Compile time type errors:              Type Errors at Compile Time.
                                                               (line  6)
* Compiler Diagnostic Severity:          Diagnostic Severity.  (line  6)
* Compiler messages:                     Diagnostic Messages.  (line  6)
* Debug optimization quality <1>:        Debugger Policy Control.
                                                               (line  6)
* Debug optimization quality <2>:        Source Location Availability.
                                                               (line  6)
* Debug optimization quality:            Variable Value Availability.
                                                               (line  6)
* Debug variables:                       Variable Access.      (line  6)
* Debugger:                              Debugger.             (line  6)
* Declarations:                          Package Lock Violations.
                                                               (line  9)
* Dynamic-extent declaration:            Dynamic-extent allocation.
                                                               (line  6)
* Efficiency:                            Efficiency.           (line  6)
* Entry points, external:                Entry Point Details.  (line  6)
* Errors, run-time:                      Unknown Locations and Interrupts.
                                                               (line  6)
* Existing programs, to run:             Getting Existing Programs to Run.
                                                               (line  6)
* External entry points:                 Entry Point Details.  (line  6)
* External, stack frame kind:            Entry Point Details.  (line  6)
* Foreign Function Interface, generation: sb-grovel.           (line  6)
* Function, tracing:                     Function Tracing.     (line  6)
* Garbage Collection, conservative:      History and Implementation of SBCL.
                                                               (line 62)
* Garbage Collection, generational:      History and Implementation of SBCL.
                                                               (line 33)
* Hashing, cryptographic:                sb-md5.               (line  6)
* Inline expansion <1>:                  Debugger Policy Control.
                                                               (line  6)
* Inline expansion:                      Open Coding and Inline Expansion.
                                                               (line  6)
* Interpreter:                           Interpreter.          (line  6)
* Interrupts:                            Unknown Locations and Interrupts.
                                                               (line  6)
* Locations, unknown:                    Unknown Locations and Interrupts.
                                                               (line  6)
* Logical pathnames:                     Lisp Pathnames.       (line 12)
* Macroexpansion:                        The Processing Path.  (line  6)
* Macroexpansion, errors during:         Errors During Macroexpansion.
                                                               (line  6)
* Messages, Compiler:                    Diagnostic Messages.  (line  6)
* Modular arithmetic <1>:                sb-rotate-byte.       (line  6)
* Modular arithmetic:                    Modular arithmetic.   (line  6)
* Open-coding:                           Open Coding and Inline Expansion.
                                                               (line  6)
* Operating System Interface:            sb-posix.             (line  6)
* Optimize declaration:                  Debugger Policy Control.
                                                               (line  6)
* Optional, stack frame kind:            Entry Point Details.  (line  6)
* Original Source <1>:                   The Original and Actual Source.
                                                               (line  6)
* Original Source:                       The Parts of a Compiler Diagnostic.
                                                               (line 35)
* Packages, locked:                      Package Locks.        (line  6)
* Pathnames:                             Pathnames.            (line  6)
* Pathnames, logical:                    Lisp Pathnames.       (line 12)
* Policy, debugger:                      Debugger Policy Control.
                                                               (line  6)
* Posix:                                 sb-posix.             (line  6)
* Precise type checking:                 Precise Type Checking.
                                                               (line  6)
* Processing Path <1>:                   The Processing Path.  (line  6)
* Processing Path:                       The Parts of a Compiler Diagnostic.
                                                               (line 42)
* Profiling:                             Profiling.            (line  6)
* Profiling, deterministic:              Deterministic Profiler.
                                                               (line  6)
* Profiling, statistical:                Statistical Profiler. (line  6)
* Queue, FIFO:                           sb-queue.             (line  6)
* Read errors, compiler:                 Read Errors.          (line  6)
* Read-Eval-Print Loop:                  sb-aclrepl.           (line  6)
* Recursion, tail:                       Debug Tail Recursion. (line  6)
* REPL:                                  sb-aclrepl.           (line  6)
* Semi-inline expansion:                 Debugger Policy Control.
                                                               (line  6)
* Severity of compiler messages:         Diagnostic Severity.  (line  6)
* Single Stepping:                       Single Stepping.      (line  6)
* Slot access:                           Slot access.          (line  6)
* Sockets, Networking:                   Networking.           (line  6)
* Source location printing, debugger:    Source Location Printing.
                                                               (line  6)
* Source-to-source transformation:       The Processing Path.  (line  6)
* Stack frames:                          Stack Frames.         (line  6)
* Static functions:                      Open Coding and Inline Expansion.
                                                               (line  6)
* Stepper:                               Single Stepping.      (line  6)
* System Calls:                          sb-posix.             (line  6)
* Tail recursion:                        Debug Tail Recursion. (line  6)
* Tracing:                               Function Tracing.     (line  6)
* Type checking, at compile time:        Type Errors at Compile Time.
                                                               (line  6)
* Type checking, precise:                Precise Type Checking.
                                                               (line  6)
* Types, portability:                    Getting Existing Programs to Run.
                                                               (line  6)
* Unknown code locations:                Unknown Locations and Interrupts.
                                                               (line  6)
* Validity of debug variables:           Variable Value Availability.
                                                               (line  6)
* Variables, debugger access:            Variable Access.      (line  6)


File: sbcl.info,  Node: Function Index,  Next: Variable Index,  Prev: Concept Index,  Up: Top

Appendix B Function Index
*************************

 [index ]
* Menu:

* (setf logical-pathname-translations):  Lisp Pathnames.      (line  12)
* (setf sb-mop:slot-value-using-class):  Metaobject Protocol. (line  85)
* (setf slot-value-using-class):         Metaobject Protocol. (line  85)
* ?:                                     Information Commands.
                                                              (line  11)
* abort:                                 Exiting Commands.    (line  20)
* addr:                                  Coercing Foreign Values.
                                                              (line   7)
* alien-funcall:                         The alien-funcall Primitive.
                                                              (line   7)
* alien-sap:                             Coercing Foreign Values.
                                                              (line  27)
* backtrace:                             Information Commands.
                                                              (line  26)
* bottom:                                Stack Motion.        (line  22)
* cast:                                  Coercing Foreign Values.
                                                              (line  13)
* cl:close:                              Methods common to all streams.
                                                              (line  15)
* cl:ed:                                 Customization Hooks for Users.
                                                              (line  30)
* cl:make-hash-table:                    Hash Table Extensions.
                                                              (line  11)
* cl:require:                            Customization Hooks for Users.
                                                              (line  14)
* cl:step:                               Single Stepping.     (line  37)
* cl:stream-element-type:                Methods common to all streams.
                                                              (line  10)
* cl:trace:                              Function Tracing.    (line  12)
* cl:untrace:                            Function Tracing.    (line 112)
* class-name:                            Metaobject Protocol. (line 103)
* class-of:                              Metaobject Protocol. (line  40)
* class-prototype:                       Metaobject Protocol. (line  33)
* compute-effective-method:              Metaobject Protocol. (line  10)
* continue:                              Exiting Commands.    (line  16)
* declare:                               Package Lock Violations.
                                                              (line   9)
* defclass:                              Metaobject Protocol. (line 103)
* defconstant:                           Defining Constants.  (line   6)
* define-alien-routine:                  The define-alien-routine Macro.
                                                              (line   8)
* define-alien-variable:                 External Foreign Variables.
                                                              (line  25)
* defmethod:                             Metaobject Protocol. (line 117)
* defpackage <1>:                        Package Lock Dictionary.
                                                              (line  99)
* defpackage:                            Implementation Packages.
                                                              (line   6)
* deref:                                 Accessing Foreign Values.
                                                              (line   7)
* describe:                              Information Commands.
                                                              (line  14)
* disable-package-locks:                 Package Lock Violations.
                                                              (line   9)
* down:                                  Stack Motion.        (line  15)
* enable-package-locks:                  Package Lock Violations.
                                                              (line   9)
* ensure-class:                          Metaobject Protocol. (line 103)
* ensure-class-using-class:              Metaobject Protocol. (line 103)
* ensure-generic-function:               Metaobject Protocol. (line  24)
* error:                                 Information Commands.
                                                              (line  22)
* extern-alien:                          External Foreign Variables.
                                                              (line  55)
* finalize-inheritance:                  Metaobject Protocol. (line  33)
* find-class:                            Metaobject Protocol. (line 103)
* find-method:                           Metaobject Protocol. (line 131)
* flet:                                  Package Lock Violations.
                                                              (line   9)
* frame:                                 Stack Motion.        (line  25)
* free-alien:                            Foreign Dynamic Allocation.
                                                              (line  42)
* generic-function-declarations:         Metaobject Protocol. (line  24)
* get-errno:                             External Foreign Variables.
                                                              (line  47)
* help:                                  Information Commands.
                                                              (line  10)
* inspect:                               Tools To Help Developers.
                                                              (line   6)
* int-sap:                               Accessing Foreign Values.
                                                              (line  36)
* intern-eql-specializer:                Metaobject Protocol. (line 117)
* labels:                                Package Lock Violations.
                                                              (line   9)
* let:                                   Package Lock Violations.
                                                              (line   9)
* let*:                                  Package Lock Violations.
                                                              (line   9)
* list-locals:                           Variable Access.     (line  28)
* logical-pathname-translations:         Lisp Pathnames.      (line  12)
* macrolet:                              Package Lock Violations.
                                                              (line   9)
* make-alien:                            Foreign Dynamic Allocation.
                                                              (line  14)
* make-method-lambda:                    Metaobject Protocol. (line 117)
* make-method-specializers-form:         Metaobject Protocol. (line 117)
* name-conflict-symbols:                 Resolution of Name Conflicts.
                                                              (line   6)
* next:                                  Single Stepping.     (line  26)
* out:                                   Single Stepping.     (line  30)
* parse-specializer-using-class:         Metaobject Protocol. (line 131)
* print:                                 Information Commands.
                                                              (line  18)
* restart:                               Exiting Commands.    (line  12)
* restart-frame:                         Exiting Commands.    (line  31)
* return:                                Exiting Commands.    (line  25)
* rotate-byte:                           sb-md5.              (line  38)
* safety:                                Declarations as Assertions.
                                                              (line   6)
* sap-alien:                             Coercing Foreign Values.
                                                              (line  20)
* sap-ref-32:                            Accessing Foreign Values.
                                                              (line  39)
* sap=:                                  Accessing Foreign Values.
                                                              (line  44)
* satisfies:                             Handling of Types.   (line  17)
* sb-alien:addr:                         Coercing Foreign Values.
                                                              (line   7)
* sb-alien:alien-funcall:                The alien-funcall Primitive.
                                                              (line   7)
* sb-alien:alien-sap:                    Coercing Foreign Values.
                                                              (line  27)
* sb-alien:cast:                         Coercing Foreign Values.
                                                              (line  13)
* sb-alien:define-alien-routine:         The define-alien-routine Macro.
                                                              (line   8)
* sb-alien:define-alien-variable:        External Foreign Variables.
                                                              (line  25)
* sb-alien:deref:                        Accessing Foreign Values.
                                                              (line   7)
* sb-alien:extern-alien:                 External Foreign Variables.
                                                              (line  55)
* sb-alien:free-alien:                   Foreign Dynamic Allocation.
                                                              (line  42)
* sb-alien:get-errno:                    External Foreign Variables.
                                                              (line  47)
* sb-alien:load-shared-object:           Loading Shared Object Files.
                                                              (line  10)
* sb-alien:make-alien:                   Foreign Dynamic Allocation.
                                                              (line  14)
* sb-alien:sap-alien:                    Coercing Foreign Values.
                                                              (line  20)
* sb-alien:slot:                         Accessing Foreign Values.
                                                              (line  17)
* sb-alien:with-alien:                   Local Foreign Variables.
                                                              (line   7)
* sb-bsd-sockets:get-host-by-address:    Name Service.        (line  36)
* sb-bsd-sockets:get-host-by-name:       Name Service.        (line  30)
* sb-bsd-sockets:get-protocol-by-name:   INET Domain Sockets. (line  34)
* sb-bsd-sockets:host-ent-address:       Name Service.        (line  41)
* sb-bsd-sockets:make-inet-address:      INET Domain Sockets. (line  30)
* sb-bsd-sockets:non-blocking-mode:      General Sockets.     (line 110)
* sb-bsd-sockets:socket-accept:          General Sockets.     (line  33)
* sb-bsd-sockets:socket-bind:            General Sockets.     (line  27)
* sb-bsd-sockets:socket-close:           General Sockets.     (line  82)
* sb-bsd-sockets:socket-connect:         General Sockets.     (line  37)
* sb-bsd-sockets:socket-error:           General Sockets.     (line 108)
* sb-bsd-sockets:socket-listen:          General Sockets.     (line  73)
* sb-bsd-sockets:socket-make-stream:     General Sockets.     (line  89)
* sb-bsd-sockets:socket-name:            General Sockets.     (line  45)
* sb-bsd-sockets:socket-open-p:          General Sockets.     (line  79)
* sb-bsd-sockets:socket-peername:        General Sockets.     (line  41)
* sb-bsd-sockets:socket-receive:         General Sockets.     (line  51)
* sb-bsd-sockets:socket-send:            General Sockets.     (line  63)
* sb-bsd-sockets:sockopt-broadcast:      Socket Options.      (line  41)
* sb-bsd-sockets:sockopt-bsd-compatible: Socket Options.      (line  25)
* sb-bsd-sockets:sockopt-debug:          Socket Options.      (line  33)
* sb-bsd-sockets:sockopt-dont-route:     Socket Options.      (line  37)
* sb-bsd-sockets:sockopt-keep-alive:     Socket Options.      (line  17)
* sb-bsd-sockets:sockopt-oob-inline:     Socket Options.      (line  21)
* sb-bsd-sockets:sockopt-pass-credentials: Socket Options.    (line  29)
* sb-bsd-sockets:sockopt-reuse-address:  Socket Options.      (line  13)
* sb-bsd-sockets:sockopt-tcp-nodelay:    Socket Options.      (line  45)
* sb-cover:clear-coverage:               sb-cover.            (line  58)
* sb-cover:report:                       sb-cover.            (line  41)
* sb-cover:reset-coverage:               sb-cover.            (line  55)
* sb-cover:restore-coverage:             sb-cover.            (line  75)
* sb-cover:restore-coverage-from-file:   sb-cover.            (line  79)
* sb-cover:save-coverage:                sb-cover.            (line  64)
* sb-cover:save-coverage-in-file:        sb-cover.            (line  71)
* sb-debug:var:                          Variable Access.     (line  36)
* sb-ext:add-implementation-package:     Package Lock Dictionary.
                                                              (line  80)
* sb-ext:array-storage-vector:           Miscellaneous Extensions.
                                                              (line   7)
* sb-ext:cancel-finalization:            Garbage Collection.  (line  61)
* sb-ext:defglobal:                      Global and Always-Bound variables.
                                                              (line   7)
* sb-ext:define-hash-table-test:         Hash Table Extensions.
                                                              (line  73)
* sb-ext:disable-package-locks:          Package Lock Violations.
                                                              (line   9)
* sb-ext:enable-package-locks:           Package Lock Violations.
                                                              (line   9)
* sb-ext:finalize:                       Garbage Collection.  (line  15)
* sb-ext:hash-table-synchronized-p:      Hash Table Extensions.
                                                              (line 140)
* sb-ext:hash-table-weakness:            Hash Table Extensions.
                                                              (line 144)
* sb-ext:list-all-timers:                Timers.              (line  79)
* sb-ext:lock-package:                   Package Lock Dictionary.
                                                              (line  59)
* sb-ext:make-timer:                     Timers.              (line  48)
* sb-ext:make-weak-pointer:              Garbage Collection.  (line  64)
* sb-ext:muffle-conditions:              Controlling Verbosity.
                                                              (line  32)
* sb-ext:name-conflict-symbols:          Resolution of Name Conflicts.
                                                              (line   6)
* sb-ext:native-namestring:              Native Filenames.    (line  41)
* sb-ext:native-pathname:                Native Filenames.    (line  37)
* sb-ext:package-implemented-by-list:    Package Lock Dictionary.
                                                              (line  69)
* sb-ext:package-implements-list:        Package Lock Dictionary.
                                                              (line  74)
* sb-ext:package-locked-error-symbol:    Package Lock Dictionary.
                                                              (line  51)
* sb-ext:package-locked-p:               Package Lock Dictionary.
                                                              (line  55)
* sb-ext:parse-native-namestring:        Native Filenames.    (line  27)
* sb-ext:posix-getenv:                   Querying the process environment.
                                                              (line  10)
* sb-ext:process-alive-p:                Running external programs.
                                                              (line 129)
* sb-ext:process-close:                  Running external programs.
                                                              (line 149)
* sb-ext:process-core-dumped:            Running external programs.
                                                              (line 145)
* sb-ext:process-error:                  Running external programs.
                                                              (line 125)
* sb-ext:process-exit-code:              Running external programs.
                                                              (line 141)
* sb-ext:process-input:                  Running external programs.
                                                              (line 117)
* sb-ext:process-kill:                   Running external programs.
                                                              (line 153)
* sb-ext:process-output:                 Running external programs.
                                                              (line 121)
* sb-ext:process-p:                      Running external programs.
                                                              (line 114)
* sb-ext:process-status:                 Running external programs.
                                                              (line 132)
* sb-ext:process-wait:                   Running external programs.
                                                              (line 136)
* sb-ext:purify:                         Efficiency Hacks.    (line  18)
* sb-ext:quit:                           Quit.                (line  12)
* sb-ext:remove-implementation-package:  Package Lock Dictionary.
                                                              (line  86)
* sb-ext:run-program:                    Running external programs.
                                                              (line  11)
* sb-ext:save-lisp-and-die:              Saving a Core Image. (line  13)
* sb-ext:schedule-timer:                 Timers.              (line  67)
* sb-ext:timer-name:                     Timers.              (line  58)
* sb-ext:timer-scheduled-p:              Timers.              (line  61)
* sb-ext:truly-the:                      Efficiency Hacks.    (line  41)
* sb-ext:unlock-package:                 Package Lock Dictionary.
                                                              (line  64)
* sb-ext:unmuffle-conditions:            Controlling Verbosity.
                                                              (line  38)
* sb-ext:unschedule-timer:               Timers.              (line  74)
* sb-ext:weak-pointer-value:             Garbage Collection.  (line  67)
* sb-ext:with-locked-hash-table:         Hash Table Extensions.
                                                              (line 131)
* sb-ext:with-unlocked-packages:         Package Lock Dictionary.
                                                              (line  95)
* sb-ext:without-package-locks:          Package Lock Dictionary.
                                                              (line  91)
* sb-gray:stream-advance-to-column:      Character output stream methods.
                                                              (line  10)
* sb-gray:stream-clear-input:            Input stream methods.
                                                              (line  10)
* sb-gray:stream-clear-output:           Output stream methods.
                                                              (line  10)
* sb-gray:stream-file-position:          Methods common to all streams.
                                                              (line  21)
* sb-gray:stream-finish-output:          Output stream methods.
                                                              (line  14)
* sb-gray:stream-force-output:           Output stream methods.
                                                              (line  19)
* sb-gray:stream-fresh-line:             Character output stream methods.
                                                              (line  19)
* sb-gray:stream-line-column:            Character output stream methods.
                                                              (line  25)
* sb-gray:stream-line-length:            Character output stream methods.
                                                              (line  34)
* sb-gray:stream-listen:                 Character input stream methods.
                                                              (line  36)
* sb-gray:stream-peek-char:              Character input stream methods.
                                                              (line  10)
* sb-gray:stream-read-byte:              Binary stream methods.
                                                              (line  10)
* sb-gray:stream-read-char:              Character input stream methods.
                                                              (line  24)
* sb-gray:stream-read-char-no-hang:      Character input stream methods.
                                                              (line  16)
* sb-gray:stream-read-line:              Character input stream methods.
                                                              (line  30)
* sb-gray:stream-read-sequence:          Input stream methods.
                                                              (line  15)
* sb-gray:stream-start-line-p:           Character output stream methods.
                                                              (line  37)
* sb-gray:stream-terpri:                 Character output stream methods.
                                                              (line  52)
* sb-gray:stream-unread-char:            Character input stream methods.
                                                              (line  43)
* sb-gray:stream-write-byte:             Binary stream methods.
                                                              (line  14)
* sb-gray:stream-write-char:             Character output stream methods.
                                                              (line  56)
* sb-gray:stream-write-sequence:         Output stream methods.
                                                              (line  24)
* sb-gray:stream-write-string:           Character output stream methods.
                                                              (line  62)
* sb-md5:md5sum-file:                    sb-md5.              (line  10)
* sb-md5:md5sum-sequence:                sb-md5.              (line  14)
* sb-md5:md5sum-stream:                  sb-md5.              (line  19)
* sb-md5:md5sum-string:                  sb-md5.              (line  23)
* sb-mop:class-prototype:                Metaobject Protocol. (line  33)
* sb-mop:compute-effective-method:       Metaobject Protocol. (line  10)
* sb-mop:ensure-class:                   Metaobject Protocol. (line 103)
* sb-mop:ensure-class-using-class:       Metaobject Protocol. (line 103)
* sb-mop:finalize-inheritance:           Metaobject Protocol. (line  33)
* sb-mop:generic-function-declarations:  Metaobject Protocol. (line  24)
* sb-mop:intern-eql-specializer:         Metaobject Protocol. (line 117)
* sb-mop:make-method-lambda:             Metaobject Protocol. (line 117)
* sb-mop:slot-boundp-using-class:        Metaobject Protocol. (line  85)
* sb-mop:slot-value-using-class:         Metaobject Protocol. (line  85)
* sb-mop:validate-superclass:            Metaobject Protocol. (line  33)
* sb-pcl:make-method-specializers-form:  Metaobject Protocol. (line 117)
* sb-pcl:parse-specializer-using-class:  Metaobject Protocol. (line 131)
* sb-pcl:unparse-specializer-using-class: Metaobject Protocol.
                                                              (line 131)
* sb-posix:file-descriptor:              File-descriptors.    (line  22)
* sb-posix:filename:                     Filenames.           (line  40)
* sb-posix:getcwd:                       Functions with idiosyncratic bindings.
                                                              (line  12)
* sb-posix:readlink:                     Functions with idiosyncratic bindings.
                                                              (line  17)
* sb-posix:syslog:                       Functions with idiosyncratic bindings.
                                                              (line  22)
* sb-profile:profile:                    Deterministic Profiler.
                                                              (line  12)
* sb-profile:report:                     Deterministic Profiler.
                                                              (line  33)
* sb-profile:reset:                      Deterministic Profiler.
                                                              (line  39)
* sb-profile:unprofile:                  Deterministic Profiler.
                                                              (line  26)
* sb-queue:dequeue:                      sb-queue.            (line  18)
* sb-queue:enqueue:                      sb-queue.            (line  23)
* sb-queue:list-queue-contents:          sb-queue.            (line  26)
* sb-queue:make-queue:                   sb-queue.            (line  31)
* sb-queue:queue-count:                  sb-queue.            (line  35)
* sb-queue:queue-empty-p:                sb-queue.            (line  40)
* sb-queue:queue-name:                   sb-queue.            (line  43)
* sb-queue:queuep:                       sb-queue.            (line  47)
* sb-rotate-byte:rotate-byte:            sb-rotate-byte.      (line  16)
* sb-sprof:profile-call-counts:          Statistical Profiler.
                                                              (line 294)
* sb-sprof:report:                       Statistical Profiler.
                                                              (line 199)
* sb-sprof:reset:                        Statistical Profiler.
                                                              (line 243)
* sb-sprof:start-profiling:              Statistical Profiler.
                                                              (line 247)
* sb-sprof:stop-profiling:               Statistical Profiler.
                                                              (line 291)
* sb-sprof:unprofile-call-counts:        Statistical Profiler.
                                                              (line 302)
* sb-sprof:with-profiling:               Statistical Profiler.
                                                              (line 135)
* sb-sprof:with-sampling:                Statistical Profiler.
                                                              (line 192)
* sb-sys:int-sap:                        Accessing Foreign Values.
                                                              (line  36)
* sb-sys:sap-ref-32:                     Accessing Foreign Values.
                                                              (line  39)
* sb-sys:sap=:                           Accessing Foreign Values.
                                                              (line  44)
* sb-thread:condition-broadcast:         Waitqueue/condition variables.
                                                              (line  91)
* sb-thread:condition-notify:            Waitqueue/condition variables.
                                                              (line  86)
* sb-thread:condition-wait:              Waitqueue/condition variables.
                                                              (line  80)
* sb-thread:get-mutex:                   Mutex Support.       (line  48)
* sb-thread:interrupt-thread:            Threading basics.    (line  55)
* sb-thread:join-thread:                 Threading basics.    (line  46)
* sb-thread:list-all-threads:            Threading basics.    (line  21)
* sb-thread:make-mutex:                  Mutex Support.       (line  37)
* sb-thread:make-semaphore:              Semaphores.          (line  17)
* sb-thread:make-thread:                 Threading basics.    (line  38)
* sb-thread:make-waitqueue:              Waitqueue/condition variables.
                                                              (line  73)
* sb-thread:mutex-name:                  Mutex Support.       (line  40)
* sb-thread:mutex-value:                 Mutex Support.       (line  44)
* sb-thread:release-mutex:               Mutex Support.       (line  72)
* sb-thread:semaphore-count:             Semaphores.          (line  20)
* sb-thread:semaphore-name:              Semaphores.          (line  23)
* sb-thread:signal-semaphore:            Semaphores.          (line  27)
* sb-thread:symbol-value-in-thread:      Threading basics.    (line  76)
* sb-thread:terminate-thread:            Threading basics.    (line  68)
* sb-thread:thread-alive-p:              Threading basics.    (line  26)
* sb-thread:thread-error-thread:         Threading basics.    (line 104)
* sb-thread:thread-name:                 Threading basics.    (line  31)
* sb-thread:thread-yield:                Threading basics.    (line  43)
* sb-thread:wait-on-semaphore:           Semaphores.          (line  31)
* sb-thread:waitqueue-name:              Waitqueue/condition variables.
                                                              (line  76)
* sb-thread:with-mutex:                  Mutex Support.       (line  84)
* sb-thread:with-recursive-lock:         Mutex Support.       (line  89)
* slot:                                  Accessing Foreign Values.
                                                              (line  17)
* slot-boundp-using-class:               Metaobject Protocol. (line  85)
* slot-value-using-class:                Metaobject Protocol. (line  85)
* source:                                Source Location Printing.
                                                              (line  11)
* start:                                 Single Stepping.     (line  15)
* step:                                  Single Stepping.     (line  21)
* stop:                                  Single Stepping.     (line  34)
* subtypep:                              Metaobject Protocol. (line  40)
* symbol-macrolet:                       Package Lock Violations.
                                                              (line   9)
* top:                                   Stack Motion.        (line  18)
* toplevel:                              Exiting Commands.    (line   9)
* trace:                                 Tools To Help Developers.
                                                              (line   6)
* typep:                                 Metaobject Protocol. (line  40)
* unparse-specializer-using-class:       Metaobject Protocol. (line 131)
* up:                                    Stack Motion.        (line  11)
* validate-superclass:                   Metaobject Protocol. (line  33)
* with-alien:                            Local Foreign Variables.
                                                              (line   7)
* with-compilation-unit:                 The Parts of a Compiler Diagnostic.
                                                              (line  21)


File: sbcl.info,  Node: Variable Index,  Next: Type Index,  Prev: Function Index,  Up: Top

Appendix C Variable Index
*************************

 [index ]
* Menu:

* *package*:                             Implementation Packages.
                                                              (line   6)
* *posix-argv* <1>:                      Command-line arguments.
                                                              (line   6)
* *posix-argv*:                          Shebang Scripts.     (line   6)
* sb-debug:*max-trace-indentation*:      Function Tracing.    (line 119)
* sb-debug:*trace-encapsulate-default*:  Function Tracing.    (line 123)
* sb-debug:*trace-indentation-step*:     Function Tracing.    (line 116)
* sb-debug:*trace-values*:               Function Tracing.    (line 126)
* sb-ext:*after-gc-hooks*:               Garbage Collection.  (line  72)
* sb-ext:*compiler-print-variable-alist*: Controlling Verbosity.
                                                              (line  47)
* sb-ext:*core-pathname*:                Saving a Core Image. (line 110)
* sb-ext:*debug-print-variable-alist*:   Debugger Command Loop.
                                                              (line  28)
* sb-ext:*ed-functions*:                 Customization Hooks for Users.
                                                              (line  37)
* sb-ext:*evaluator-mode*:               Interpreter.         (line   6)
* sb-ext:*exit-hooks*:                   Initialization and Exit Hooks.
                                                              (line  15)
* sb-ext:*init-hooks*:                   Initialization and Exit Hooks.
                                                              (line   9)
* sb-ext:*invoke-debugger-hook*:         Debugger Invocation. (line  29)
* sb-ext:*module-provider-functions*:    Customization Hooks for Users.
                                                              (line  23)
* sb-ext:*muffled-warnings*:             Customization Hooks for Users.
                                                              (line  46)
* sb-ext:*posix-argv* <1>:               Command-line arguments.
                                                              (line   6)
* sb-ext:*posix-argv*:                   Shebang Scripts.     (line   6)
* sb-ext:*save-hooks*:                   Saving a Core Image. (line 101)
* sb-ext:*stack-allocate-dynamic-extent*: Dynamic-extent allocation.
                                                              (line  17)
* sb-sprof:*max-samples*:                Statistical Profiler.
                                                              (line 309)
* sb-sprof:*sample-interval*:            Statistical Profiler.
                                                              (line 314)
* sb-thread:*current-thread*:            Threading basics.    (line  18)


File: sbcl.info,  Node: Type Index,  Next: Colophon,  Prev: Variable Index,  Up: Top

Appendix D Type Index
*********************

 [index ]
* Menu:

* code-deletion-note:                    Diagnostic Severity. (line   6)
* compiler-note:                         Diagnostic Severity. (line   6)
* error:                                 Diagnostic Severity. (line   6)
* funcallable-standard-class:            Metaobject Protocol. (line  33)
* funcallable-standard-object:           Metaobject Protocol. (line  15)
* function:                              Metaobject Protocol. (line  15)
* generic-function:                      Metaobject Protocol. (line  15)
* name-conflict:                         Resolution of Name Conflicts.
                                                              (line   6)
* package-error:                         Package Lock Violations.
                                                              (line   6)
* package-lock-violation:                Package Lock Violations.
                                                              (line   6)
* package-locked-error:                  Package Lock Violations.
                                                              (line   6)
* sb-bsd-sockets:host-ent:               Name Service.        (line  14)
* sb-bsd-sockets:inet-socket:            INET Domain Sockets. (line  19)
* sb-bsd-sockets:local-socket:           Local (Unix) Domain Sockets.
                                                              (line  15)
* sb-bsd-sockets:socket:                 General Sockets.     (line   7)
* sb-ext:always-bound:                   Global and Always-Bound variables.
                                                              (line  30)
* sb-ext:code-deletion-note:             Diagnostic Severity. (line  42)
* sb-ext:compiler-note:                  Diagnostic Severity. (line  34)
* sb-ext:disable-package-locks:          Package Lock Dictionary.
                                                              (line   7)
* sb-ext:enable-package-locks:           Package Lock Dictionary.
                                                              (line  15)
* sb-ext:global:                         Global and Always-Bound variables.
                                                              (line  19)
* sb-ext:name-conflict:                  Resolution of Name Conflicts.
                                                              (line   6)
* sb-ext:package-lock-violation <1>:     Package Lock Dictionary.
                                                              (line  24)
* sb-ext:package-lock-violation:         Package Lock Violations.
                                                              (line   6)
* sb-ext:package-locked-error <1>:       Package Lock Dictionary.
                                                              (line  31)
* sb-ext:package-locked-error:           Package Lock Violations.
                                                              (line   6)
* sb-ext:symbol-package-locked-error <1>: Package Lock Dictionary.
                                                              (line  40)
* sb-ext:symbol-package-locked-error:    Package Lock Violations.
                                                              (line   6)
* sb-ext:timer:                          Timers.              (line  42)
* sb-gray:fundamental-binary-input-stream: Gray Streams classes.
                                                              (line  51)
* sb-gray:fundamental-binary-output-stream: Gray Streams classes.
                                                              (line  59)
* sb-gray:fundamental-binary-stream:     Gray Streams classes.
                                                              (line  33)
* sb-gray:fundamental-character-input-stream: Gray Streams classes.
                                                              (line  67)
* sb-gray:fundamental-character-output-stream: Gray Streams classes.
                                                              (line  75)
* sb-gray:fundamental-character-stream:  Gray Streams classes.
                                                              (line  44)
* sb-gray:fundamental-input-stream:      Gray Streams classes.
                                                              (line  15)
* sb-gray:fundamental-output-stream:     Gray Streams classes.
                                                              (line  24)
* sb-gray:fundamental-stream:            Gray Streams classes.
                                                              (line   9)
* sb-mop:funcallable-standard-class:     Metaobject Protocol. (line  33)
* sb-mop:funcallable-standard-object:    Metaobject Protocol. (line  15)
* sb-posix:file-descriptor:              File-descriptors.    (line   7)
* sb-posix:file-descriptor-designator:   File-descriptors.    (line  17)
* sb-posix:filename:                     Filenames.           (line   7)
* sb-posix:filename-designator:          Filenames.           (line  35)
* sb-posix:flock:                        Lisp objects and C structures.
                                                              (line  32)
* sb-posix:passwd:                       Lisp objects and C structures.
                                                              (line  68)
* sb-posix:stat:                         Lisp objects and C structures.
                                                              (line 116)
* sb-posix:termios:                      Lisp objects and C structures.
                                                              (line 172)
* sb-posix:timeval:                      Lisp objects and C structures.
                                                              (line 205)
* sb-queue:queue:                        sb-queue.            (line  11)
* sb-thread:interrupt-thread-error:      Threading basics.    (line 107)
* sb-thread:join-thread-error:           Threading basics.    (line 115)
* sb-thread:mutex:                       Mutex Support.       (line  32)
* sb-thread:semaphore:                   Semaphores.          (line  10)
* sb-thread:thread:                      Threading basics.    (line  12)
* sb-thread:thread-error:                Threading basics.    (line  95)
* sb-thread:waitqueue:                   Waitqueue/condition variables.
                                                              (line  68)
* standard-class:                        Metaobject Protocol. (line  33)
* standard-generic-function:             Metaobject Protocol. (line  15)
* standard-object:                       Metaobject Protocol. (line  15)
* style-warning:                         Diagnostic Severity. (line   6)
* symbol-package-locked-error:           Package Lock Violations.
                                                              (line   6)
* warning:                               Diagnostic Severity. (line   6)


File: sbcl.info,  Node: Colophon,  Prev: Type Index,  Up: Top

Colophon
********

This manual is maintained in Texinfo, and automatically translated into
other forms (e.g. HTML or pdf). If you're _reading_ this manual in one
of these non-Texinfo translated forms, that's fine, but if you want to
_modify_ this manual, you are strongly advised to seek out a Texinfo
version and modify that instead of modifying a translated version. Even
better might be to seek out _the_ Texinfo version (maintained at the
time of this writing as part of the SBCL project at
`http://sbcl.sourceforge.net/') and submit a patch.


