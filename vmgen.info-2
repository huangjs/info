This is vmgen.info, produced by makeinfo version 4.2 from vmgen.texi.

This manual is for Vmgen (version 0.6.2, August 25, 2003), the virtual
machine interpreter generator

   Copyright (C) 2002, 03,2003 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."
   
INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* Vmgen: (vmgen).               Virtual machine interpreter generator
END-INFO-DIR-ENTRY


File: vmgen.info,  Node: VM instruction table,  Next: VM code generation,  Prev: VM engine,  Up: Using the generated code

VM instruction table
====================

   For threaded code we also need to produce a table containing the
labels of all VM instructions.  This is needed for VM code generation
(*note VM code generation::), and it has to be done in the engine
function, because the labels are not visible outside.  It then has to be
passed outside the function (and assigned to `vm_prim'), to be used by
the VM code generation functions.

   This means that the engine function has to be called first to produce
the VM instruction table, and later, after generating VM code, it has to
be called again to execute the generated VM code (yes, this is ugly).
In our example program, these two modes of calling the engine function
are differentiated by the value of the parameter ip0 (if it equals 0,
then the table is passed out, otherwise the VM code is executed); in our
example, we pass the table out by assigning it to `vm_prim' and
returning from `engine'.

   In our example (`vmgen-ex/engine.c'), we also build such a table for
switch dispatch; this is mainly done for uniformity.

   For switch dispatch, we also need to define the VM instruction
opcodes used as case labels in an `enum'.

   For both purposes (VM instruction table, and enum), the file
`NAME-labels.i' is generated by Vmgen.  You have to define the
following macro used in this file:

`INST_ADDR(INST_NAME)'
     For switch dispatch, this is just the name of the switch label
     (the same name as used in `LABEL(INST_NAME)'), for both uses of
     `NAME-labels.i'.  For threaded-code dispatch, this is the address
     of the label defined in `LABEL(INST_NAME)'); the address is taken
     with `&&' (*note Labels as Values: (gcc.info)Labels as Values.).


File: vmgen.info,  Node: VM code generation,  Next: Peephole optimization,  Prev: VM instruction table,  Up: Using the generated code

VM code generation
==================

   Vmgen generates VM code generation functions in `NAME-gen.i' that
the front end can call to generate VM code.  This is essential for an
interpretive system.

   For a VM instruction `x ( #a b #c -- d )', Vmgen generates a
function with the prototype

     void gen_x(Inst **ctp, a_type a, c_type c)

   The `ctp' argument points to a pointer to the next instruction.
`*ctp' is increased by the generation functions; i.e., you should
allocate memory for the code to be generated beforehand, and start with
*ctp set at the start of this memory area.  Before running out of
memory, allocate a new area, and generate a VM-level jump to the new
area (this overflow handling is not implemented in our examples).

   The other arguments correspond to the immediate arguments of the VM
instruction (with their appropriate types as defined in the
`type_prefix' declaration.

   The following types, variables, and functions are used in
`NAME-gen.i':

`Inst'
     The type of the VM instruction; if you use threaded code, this is
     `void *'; for switch dispatch this is an integer type.

`vm_prim'
     The VM instruction table (type: `Inst *', *note VM instruction
     table::).

`gen_inst(Inst **ctp, Inst i)'
     This function compiles the instruction `i'.  Take a look at it in
     `vmgen-ex/peephole.c'.  It is trivial when you don't want to use
     superinstructions (just the last two lines of the example
     function), and slightly more complicated in the example due to its
     ability to use superinstructions (*note Peephole optimization::).

`genarg_TYPE_PREFIX(Inst **ctp, TYPE TYPE_PREFIX)'
     This compiles an immediate argument of TYPE (as defined in a
     `type-prefix' definition).  These functions are trivial to define
     (see `vmgen-ex/support.c').  You need one of these functions for
     every type that you use as immediate argument.

   In addition to using these functions to generate code, you should
call `BB_BOUNDARY' at every basic block entry point if you ever want to
use superinstructions (or if you want to use the profiling supported by
Vmgen; but this support is also useful mainly for selecting
superinstructions).  If you use `BB_BOUNDARY', you should also define
it (take a look at its definition in `vmgen-ex/mini.y').

   You do not need to call `BB_BOUNDARY' after branches, because you
will not define superinstructions that contain branches in the middle
(and if you did, and it would work, there would be no reason to end the
superinstruction at the branch), and because the branches announce
themselves to the profiler.


File: vmgen.info,  Node: Peephole optimization,  Next: VM disassembler,  Prev: VM code generation,  Up: Using the generated code

Peephole optimization
=====================

   You need peephole optimization only if you want to use
superinstructions.  But having the code for it does not hurt much if you
do not use superinstructions.

   A simple greedy peephole optimization algorithm is used for
superinstruction selection: every time `gen_inst' compiles a VM
instruction, it checks if it can combine it with the last VM instruction
(which may also be a superinstruction resulting from a previous peephole
optimization); if so, it changes the last instruction to the combined
instruction instead of laying down `i' at the current `*ctp'.

   The code for peephole optimization is in `vmgen-ex/peephole.c'.  You
can use this file almost verbatim.  Vmgen generates `FILE-peephole.i'
which contains data for the peephole optimizer.

   You have to call `init_peeptable()' after initializing `vm_prim',
and before compiling any VM code to initialize data structures for
peephole optimization.  After that, compiling with the VM code
generation functions will automatically combine VM instructions into
superinstructions.  Since you do not want to combine instructions
across VM branch targets (otherwise there will not be a proper VM
instruction to branch to), you have to call `BB_BOUNDARY' (*note VM
code generation::) at branch targets.


File: vmgen.info,  Node: VM disassembler,  Next: VM profiler,  Prev: Peephole optimization,  Up: Using the generated code

VM disassembler
===============

   A VM code disassembler is optional for an interpretive system, but
highly recommended during its development and maintenance, because it is
very useful for detecting bugs in the front end (and for distinguishing
them from VM interpreter bugs).

   Vmgen supports VM code disassembling by generating `FILE-disasm.i'.
This code has to be wrapped into a function, as is done in
`vmgen-ex/disasm.c'.  You can use this file almost verbatim.  In
addition to `vm_A2B(a,b)', `vm_out', `printarg_TYPE(VALUE)', which are
explained above, the following macros and variables are used in
`FILE-disasm.i' (and you have to define them):

`ip'
     This variable points to the opcode of the current VM instruction.

`IP IPTOS'
     `IPTOS' is the first argument of the current VM instruction, and
     `IP' points to it; this is just as in the engine, but here `ip'
     points to the opcode of the VM instruction (in contrast to the
     engine, where `ip' points to the next cell, or even one further).

`VM_IS_INST(Inst i, int n)'
     Tests if the opcode `i' is the same as the `n'th entry in the VM
     instruction table.


File: vmgen.info,  Node: VM profiler,  Prev: VM disassembler,  Up: Using the generated code

VM profiler
===========

   The VM profiler is designed for getting execution and occurence
counts for VM instruction sequences, and these counts can then be used
for selecting sequences as superinstructions.  The VM profiler is
probably not useful as profiling tool for the interpretive system.
I.e., the VM profiler is useful for the developers, but not the users
of the interpretive system.

   The output of the profiler is: for each basic block (executed at
least once), it produces the dynamic execution count of that basic
block and all its subsequences; e.g.,

            9227465  lit storelocal
            9227465  storelocal branch
            9227465  lit storelocal branch

   I.e., a basic block consisting of `lit storelocal branch' is
executed 9227465 times.

   This output can be combined in various ways.  E.g.,
`vmgen-ex/stat.awk' adds up the occurences of a given sequence wrt
dynamic execution, static occurence, and per-program occurence.  E.g.,

           2      16        36910041 loadlocal lit

indicates that the sequence `loadlocal lit' occurs in 2 programs, in 16
places, and has been executed 36910041 times.  Now you can select
superinstructions in any way you like (note that compile time and space
typically limit the number of superinstructions to 100-1000).  After
you have done that, `vmgen/seq2rule.awk' turns lines of the form above
into rules for inclusion in a Vmgen input file.  Note that this script
does not ensure that all prefixes are defined, so you have to do that
in other ways.  So, an overall script for turning profiles into
superinstructions can look like this:

     awk -f stat.awk fib.prof test.prof|
     awk '$3>=10000'|                #select sequences
     fgrep -v -f peephole-blacklist| #eliminate wrong instructions
     awk -f seq2rule.awk|            #turn into superinstructions
     sort -k 3 >mini-super.vmg       #sort sequences

   Here the dynamic count is used for selecting sequences (preliminary
results indicate that the static count gives better results, though);
the third line eliminates sequences containing instructions that must
not occur in a superinstruction, because they access a stack directly.
The dynamic count selection ensures that all subsequences (including
prefixes) of longer sequences occur (because subsequences have at least
the same count as the longer sequences); the sort in the last line
ensures that longer superinstructions occur after their prefixes.

   But before using this, you have to have the profiler.  Vmgen
supports its creation by generating `FILE-profile.i'; you also need the
wrapper file `vmgen-ex/profile.c' that you can use almost verbatim.

   The profiler works by recording the targets of all VM control flow
changes (through `SUPER_END' during execution, and through
`BB_BOUNDARY' in the front end), and counting (through `SUPER_END') how
often they were targeted.  After the program run, the numbers are
corrected such that each VM basic block has the correct count (entering
a block without executing a branch does not increase the count, and the
correction fixes that), then the subsequences of all basic blocks are
printed.  To get all this, you just have to define `SUPER_END' (and
`BB_BOUNDARY') appropriately, and call `vm_print_profile(FILE *file)'
when you want to output the profile on `file'.

   The `FILE-profile.i' is similar to the disassembler file, and it
uses variables and functions defined in `vmgen-ex/profile.c', plus
`VM_IS_INST' already defined for the VM disassembler (*note VM
disassembler::).


File: vmgen.info,  Node: Hints,  Next: The future,  Prev: Using the generated code,  Up: Top

Hints
*****

* Menu:

* Floating point::              and stacks


File: vmgen.info,  Node: Floating point,  Prev: Hints,  Up: Hints

Floating point
==============

   How should you deal with floating point values?  Should you use the
same stack as for integers/pointers, or a different one?  This section
discusses this issue with a view on execution speed.

   The simpler approach is to use a separate floating-point stack.  This
allows you to choose FP value size without considering the size of the
integers/pointers, and you avoid a number of performance problems.  The
main downside is that this needs an FP stack pointer (and that may not
fit in the register file on the 386 arhitecture, costing some
performance, but comparatively little if you take the other option into
account).  If you use a separate FP stack (with stack pointer `fp'),
using an fpTOS is helpful on most machines, but some spill the fpTOS
register into memory, and fpTOS should not be used there.

   The other approach is to share one stack (pointed to by, say, `sp')
between integer/pointer and floating-point values.  This is ok if you do
not use `spTOS'.  If you do use `spTOS', the compiler has to decide
whether to put that variable into an integer or a floating point
register, and the other type of operation becomes quite expensive on
most machines (because moving values between integer and FP registers is
quite expensive).  If a value of one type has to be synthesized out of
two values of the other type (`double' types), things are even more
interesting.

   One way around this problem would be to not use the `spTOS'
supported by Vmgen, but to use explicit top-of-stack variables (one for
integers, one for FP values), and having a kind of accumulator+stack
architecture (e.g., Ocaml bytecode uses this approach); however, this is
a major change, and it's ramifications are not completely clear.


File: vmgen.info,  Node: The future,  Next: Changes,  Prev: Hints,  Up: Top

The future
**********

   We have a number of ideas for future versions of Vmgen.  However,
there are so many possible things to do that we would like some
feedback from you.  What are you doing with Vmgen, what features are
you missing, and why?

   One idea we are thinking about is to generate just one `.c' file
instead of letting you copy and adapt all the wrapper files (you would
still have to define stuff like the type-specific macros, and stack
pointers etc. somewhere).  The advantage would be that, if we change the
wrapper files between versions, you would not need to integrate your
changes and our changes to them; Vmgen would also be easier to use for
beginners.  The main disadvantage of that is that it would reduce the
flexibility of Vmgen a little (well, those who like flexibility could
still patch the resulting `.c' file, like they are now doing for the
wrapper files).  In any case, if you are doing things to the wrapper
files that would cause problems in a generated-`.c'-file approach,
please let us know.


File: vmgen.info,  Node: Changes,  Next: Contact,  Prev: The future,  Up: Top

Changes
*******

   User-visible changes between 0.5.9-20020822 and 0.5.9-20020901:

   The store optimization is now disabled by default, but can be
enabled by the user (*note Store Optimization::).  Documentation for
this optimization is also new.

   User-visible changes between 0.5.9-20010501 and 0.5.9-20020822:

   There is now a manual (in info, HTML, Postscript, or plain text
format).

   There is the vmgen-ex2 variant of the vmgen-ex example; the new
variant uses a union type instead of lots of casting.

   Both variants of the example can now be compiled with an ANSI C
compiler (using switch dispatch and losing quite a bit of performance);
tested with `lcc'.

   Users of the gforth-0.5.9-20010501 version of Vmgen need to change
several things in their source code to use the current version.  I
recommend keeping the gforth-0.5.9-20010501 version until you have
completed the change (note that you can have several versions of Gforth
installed at the same time).  I hope to avoid such incompatible changes
in the future.

   The required changes are:

`TAIL;'
     has been renamed into `INST_TAIL;' (less chance of an accidental
     match).

`vm_A2B'
     now takes two arguments.

`vm_twoA2B(b,a1,a2);'
     changed to vm_twoA2B(a1,a2,b) (note the absence of the `;').

   Also some new macros have to be defined, e.g., `INST_ADDR', and
`LABEL'; some macros have to be defined in new contexts, e.g.,
`VM_IS_INST' is now also needed in the disassembler.


File: vmgen.info,  Node: Contact,  Next: Copying This Manual,  Prev: Changes,  Up: Top

Contact
*******

   To report a bug, use
<https://savannah.gnu.org/bugs/?func=addbug&group_id=2672>.

   For discussion on Vmgen (e.g., how to use it), use the mailing list
<bug-vmgen@mail.freesoftware.fsf.org> (use
<http://mail.gnu.org/mailman/listinfo/help-vmgen> to subscribe).

   You can find vmgen information at
<http://www.complang.tuwien.ac.at/anton/vmgen/>.


File: vmgen.info,  Node: Copying This Manual,  Next: Index,  Prev: Contact,  Up: Top

Copying This Manual
*******************

* Menu:

* GNU Free Documentation License::  License for copying this manual.


File: vmgen.info,  Node: GNU Free Documentation License,  Up: Copying This Manual

GNU Free Documentation License
==============================

                        Version 1.1, March 2000
     Copyright (C) 2000 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     written document "free" in the sense of freedom: to assure everyone
     the effective freedom to copy and redistribute it, with or without
     modifying it, either commercially or noncommercially.  Secondarily,
     this License preserves for the author and publisher a way to get
     credit for their work, while not being considered responsible for
     modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work that contains a
     notice placed by the copyright holder saying it can be distributed
     under the terms of this License.  The "Document", below, refers to
     any such manual or work.  Any member of the public is a licensee,
     and is addressed as "you".

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter
     section of the Document that deals exclusively with the
     relationship of the publishers or authors of the Document to the
     Document's overall subject (or to related matters) and contains
     nothing that could fall directly within that overall subject.
     (For example, if the Document is in part a textbook of
     mathematics, a Secondary Section may not explain any mathematics.)
     The relationship could be a matter of historical connection with
     the subject or with related matters, or of legal, commercial,
     philosophical, ethical or political position regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, whose contents can be viewed and edited directly
     and straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup has been designed
     to thwart or discourage subsequent modification by readers is not
     Transparent.  A copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML designed for human modification.
     Opaque formats include PostScript, PDF, proprietary formats that
     can be read and edited only by proprietary word processors, SGML
     or XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies of the Document numbering more than
     100, and the Document's license notice requires Cover Texts, you
     must enclose the copies in covers that carry, clearly and legibly,
     all these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a publicly-accessible
     computer-network location containing a complete Transparent copy
     of the Document, free of added material, which the general
     network-using public has access to download anonymously at no
     charge using public-standard network protocols.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has less than five).

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section entitled "History", and its title, and
          add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. In any section entitled "Acknowledgments" or "Dedications",
          preserve the section's title, and preserve in the section all
          the substance and tone of each of the contributor
          acknowledgments and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section as "Endorsements" or to
          conflict in title with any Invariant Section.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections entitled
     "History" in the various original documents, forming one section
     entitled "History"; likewise combine any sections entitled
     "Acknowledgments", and any sections entitled "Dedications".  You
     must delete all sections entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, does not as a whole count as a
     Modified Version of the Document, provided no compilation
     copyright is claimed for the compilation.  Such a compilation is
     called an "aggregate", and this License does not apply to the
     other self-contained works thus compiled with the Document, on
     account of their being thus compiled, if they are not themselves
     derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one
     quarter of the entire aggregate, the Document's Cover Texts may be
     placed on covers that surround only the Document within the
     aggregate.  Otherwise they must appear on covers around the whole
     aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License provided that you also include the
     original English version of this License.  In case of a
     disagreement between the translation and the original English
     version of this License, the original English version will prevail.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.

ADDENDUM: How to use this License for your documents
----------------------------------------------------

   To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.1
       or any later version published by the Free Software Foundation;
       with the Invariant Sections being LIST THEIR TITLES, with the
       Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
       A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no Front-Cover
Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being
LIST"; likewise for Back-Cover Texts.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: vmgen.info,  Node: Index,  Prev: Copying This Manual,  Up: Top

Index
*****

* Menu:

* # can only be on the input side error: Error messages.
* #line:                                 Input File Grammar.
* -disasm.i output file:                 VM disassembler.
* -gen.i output file:                    VM code generation.
* -h, command-line option:               Invoking Vmgen.
* -help, command-line option:            Invoking Vmgen.
* -labels.i output file:                 VM instruction table.
* -peephole.i output file:               Peephole optimization.
* -profile.i output file:                VM profiler.
* -v, command-line option:               Invoking Vmgen.
* -version, command-line option:         Invoking Vmgen.
* -vm.i output file:                     VM engine.
* \C:                                    Input File Grammar.
* \E:                                    Eval escapes.
* accessing stack (pointer):             C Code restrictions.
* advantages of interpreters:            Why interpreters?.
* advantages of vmgen:                   Why interpreters?.
* assumptions about C code:              C Code restrictions.
* basic block, VM level:                 C Code Macros.
* basic type of a stack:                 Simple instructions.
* BB_BOUNDARY in profiling:              VM profiler.
* branch instruction, VM:                Front end and VM interpreter.
* C code restrictions:                   C Code restrictions.
* C escape:                              Input File Grammar.
* casts example:                         Example overview.
* casts in type cast macros:             VM engine.
* Changes from old versions:             Changes.
* code generation, VM:                   VM code generation.
* conditional compilation of Vmgen output: Input File Grammar.
* default stack of a type prefix:        Simple instructions.
* defining a stack:                      Simple instructions.
* defining superinstructions:            Superinstructions.
* disasm.c:                              VM disassembler.
* disassembler, VM code:                 VM disassembler.
* Dispatch of VM instructions:           Dispatch.
* effect, stack:                         Simple instructions.
* efficiency features overview:          Introduction.
* eliminating stack stores:              Store Optimization.
* engine:                                VM engine.
* engine.c:                              VM engine.
* error messages:                        Error messages.
* escape to Forth:                       Eval escapes.
* eval escape:                           Eval escapes.
* example files:                         Example overview.
* example of a Vmgen-based interpreter:  Example.
* example overview:                      Example overview.
* executing VM code:                     VM engine.
* FDL, GNU Free Documentation License:   GNU Free Documentation License.
* format, input file:                    Input File Format.
* free-format, not:                      Input File Grammar.
* front-end:                             Front end and VM interpreter.
* functionality features overview:       Introduction.
* future ideas:                          The future.
* garbage collection:                    Data handling.
* generated code, usage:                 Using the generated code.
* grammar, input file:                   Input File Grammar.
* hints:                                 Hints.
* IMM_ARG:                               VM engine.
* immediate argument, VM instruction:    Front end and VM interpreter.
* immediate arguments:                   Data handling.
* immediate arguments, VM code generation: VM code generation.
* include-skipped-insts:                 Superinstructions.
* input file format:                     Input File Format.
* input file grammar:                    Input File Grammar.
* instruction pointer definition:        VM engine.
* instruction pointer, access:           C Code restrictions.
* instruction stream <1>:                Simple instructions.
* instruction stream:                    Data handling.
* instruction stream, basic type:        VM engine.
* instruction table:                     VM instruction table.
* instruction, simple VM:                Simple instructions.
* instruction, VM:                       Front end and VM interpreter.
* interpreters, advantages:              Why interpreters?.
* Invoking Vmgen:                        Invoking Vmgen.
* IP, IPTOS in disassmbler:              VM disassembler.
* labels for threaded code:              VM instruction table.
* macros recognized by Vmgen:            C Code Macros.
* main interpreter loop:                 Dispatch.
* modularization of interpreters:        Front end and VM interpreter.
* newlines, significance in syntax:      Input File Grammar.
* opcode definition:                     VM instruction table.
* opcode, VM instruction:                Front end and VM interpreter.
* optimization, stack stores:            Store Optimization.
* peephole optimization:                 Peephole optimization.
* peephole.c:                            Peephole optimization.
* prefix for this combination must be defined earlier error: Error messages.
* prefix, stack:                         Simple instructions.
* prefix, type:                          Simple instructions.
* prefixes of superinstructions:         Superinstructions.
* profile.c:                             VM profiler.
* profiling example:                     Using profiling to create superinstructions.
* profiling for selecting superinstructions: VM profiler.
* reference counting:                    Data handling.
* register machine:                      Data handling.
* Register VM:                           Register Machines.
* register, VM:                          Front end and VM interpreter.
* restrictions on C code:                C Code restrictions.
* seq2rule.awk:                          VM profiler.
* simple VM instruction:                 Simple instructions.
* size, stack items:                     Data handling.
* speed for JVM:                         Introduction.
* speed of interpreters:                 Why interpreters?.
* stack basic type:                      Simple instructions.
* stack caching:                         VM engine.
* stack caching, restriction on C code:  C Code restrictions.
* stack definition:                      Simple instructions.
* stack effect:                          Simple instructions.
* stack growth direction:                Stack growth direction.
* stack item size:                       Data handling.
* stack machine:                         Data handling.
* stack pointer definition:              VM engine.
* stack pointer, access:                 C Code restrictions.
* stack prefix:                          Simple instructions.
* stack stores, optimization:            Store Optimization.
* stack-access-transform:                Stack growth direction.
* stat.awk:                              VM profiler.
* store optimization:                    Store Optimization.
* SUPER_END in profiling:                VM profiler.
* superinstructions and profiling:       VM profiler.
* superinstructions and tracing:         VM engine.
* superinstructions example:             Using profiling to create superinstructions.
* Superinstructions for register VMs:    Register Machines.
* superinstructions, defining:           Superinstructions.
* superinstructions, generating:         Peephole optimization.
* superinstructions, restrictions on components: C Code restrictions.
* switch dispatch:                       Dispatch.
* sync line syntax error:                Error messages.
* sync lines:                            Input File Grammar.
* syntax error, wrong char error:        Error messages.
* TAIL;, changes:                        Changes.
* threaded code:                         Dispatch.
* too many stacks error:                 Error messages.
* top of stack caching:                  VM engine.
* TOS:                                   VM engine.
* tracing of register VMs:               Register Machines.
* tracing VM code:                       VM engine.
* type cast macro:                       VM engine.
* type casting between floats and integers: VM engine.
* type of a stack, basic:                Simple instructions.
* type prefix:                           Simple instructions.
* unions example:                        Example overview.
* unions in type cast macros:            VM engine.
* unknown prefix error:                  Error messages.
* unknown primitive error:               Error messages.
* Using vmgen-erated code:               Using the generated code.
* virtual machine:                       Front end and VM interpreter.
* VM:                                    Front end and VM interpreter.
* VM branch instruction:                 Front end and VM interpreter.
* VM code generation:                    VM code generation.
* VM disassembler:                       VM disassembler.
* VM instruction:                        Front end and VM interpreter.
* VM instruction execution:              VM engine.
* VM profiler:                           VM profiler.
* VM register:                           Front end and VM interpreter.
* vm_A2B, changes:                       Changes.
* VM_IS_INST in profiling:               VM profiler.
* vm_prim, definition:                   VM instruction table.
* vm_prim, use:                          VM code generation.
* vm_twoA2B, changes:                    Changes.
* vmgen-ex:                              Example overview.
* vmgen-ex2:                             Example overview.
* wrapper files:                         Example overview.


